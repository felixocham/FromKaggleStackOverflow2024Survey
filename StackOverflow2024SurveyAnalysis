{"metadata":{"kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.12.4"},"panel-cell-order":["1ecf6f08-4317-4caa-bd84-25e42b448291","be5e487c-0765-4c4d-8900-fadf3d73ae91","92d8ca7b-1015-438e-94a8-69439fe57a96","d95a3fe7-6cb3-420b-aa79-12ea6a8267b7","4e8f0262-9896-4cbf-aacb-ea0c0b0d0165","9ea83e40-dc72-445a-9d47-3351f5c68cfb","6cea7ecd-9faa-4a41-be6a-200be9956aa8","fc0ca644-5d12-4022-ac4d-5a656095afdb","3c33b5d2-7507-42ee-be3d-b9b06b11ea43","306de702-8b2f-40e9-b0ca-e95225d5e6d0","10a7942f-c48c-4030-a79c-cb57451d45a8","6d4796c5-82a2-454c-806b-33f2ac44a1b6","d1cf6986-7e3c-4946-babe-95b2b33fdd88","d3fab4c1-8e6c-432e-9c3c-42f8fb149fb8","a9a53c4d-aca0-4b17-b9a5-c3fd217c5e49","9d3c51e8-2b25-4e1e-9855-06779643adcd","2d657d45-76ba-49a4-abb7-14420fb57559","b794ca98-c20e-46f1-9d25-ceb50bcae06f","122c0cdb-27c7-4b7d-8496-4a679dc7d9ea","3507904b-a035-4af1-8a2a-07dfab62ecbc","caf55632-1d03-4cb4-8cbf-400ed9716c5a","33ef6f04-f597-4060-89d6-dc6b59493f84","5103a6ef-37b0-4463-9a7a-5a5afd273f59","2d705819-bcd7-4d8e-a8b8-8b2fb7bac44a","091cb1c3-9e03-4c4d-90a6-3f01539f1e70","1c30c01a-b960-4185-a2a5-bbddbeef183c","8b4f15cc-0af4-481e-858b-36477a2fbe32","3149338d-df9e-4552-aea6-f215f6b24854","b32b2323-05b5-4895-bf60-c64f1f7bde3e","51cbd948-8535-40f4-8cef-001daa018b18","02bdea84-52a2-4e1c-9caf-54f4994d2943","4e5fab77-354a-47f4-a40b-b5a2663b118c","8e1f866c-ac86-4aaa-b906-e6e649156793","c39c5d75-201e-41af-b03f-8eb242cf8d4f","ff6e12e2-1f71-46fb-aef2-5ae5df344019","213829ea-366e-445a-b6d9-ec4c839bb9f5","d4137730-4c77-4c22-b4a7-0db03400b8b7","978dadba-7887-4487-b63b-972231aa8415","8a34fa45-c3a2-49ce-8c7e-f3b280ed2311","12afdb60-9958-4344-a94a-7c87fbea591f","1910d418-a58d-4e01-a3d2-ddec5855b947","ce4bc215-a176-4b0d-9594-0c17cdde13ed","9ee3955e-7407-4a3e-9fca-ea4e0fe5cdba","01381163-8652-45fa-86d2-a941f4fb7043","210e7879-7fa6-4405-b90d-ac5436aa1fad","4570d8ca-b1d1-41bd-bbc9-5fd642aefbe2","8a628fe9-8732-4973-ad74-8f16e430ea24","a7cf2797-a8fb-4bd9-a35f-23fd26abf200","6eb480aa-e7b0-4fec-91c0-4812322a899c","8d6d0762-a866-43e3-9d8b-586e88ebdc85","1314da06-d5ef-461d-b8bd-5af227f49d06","8549bcf3-6293-45d8-925f-307412dacd2a","e5d8615c-8ed2-4ea1-9ec7-1961526c296d","6daeb8dd-076f-47e2-b6e9-4255b4a39c11","96a9d9e0-227f-43c2-91cc-59b23314b1f3","2ee073f5-263a-4b25-bfe0-5d9f7078bb95","cca58ddc-980d-4dd2-8b70-5eb0f660d823","40bcef7a-ada5-4797-9bf5-25f1db9985f8","a044b1ba-8caf-4e8a-8777-f1f486f47a3d","89259d17-ab32-49bf-9b82-7c2411385881","c7f22955-5886-4b93-a402-feff39ba7501","1fb0f60d-6cb2-4c1f-a1b5-c768a32b25e2","b2cbd78b-23a0-4ac9-b0cd-a317d2397da8","1872725f-6efd-485b-a8fa-c8a7bb9e0d8c","ee79816a-7b28-430b-9bc3-2d684d375b73","0b5e671c-eefa-4b1a-87d0-48ac8df3be46","909deba1-11ac-4dba-9906-e12fd47dfb9e","da1af6a8-92db-4752-99a9-83e844e78dc1","930633ba-7b80-4c94-9259-b292d0242500","a7f1ceb2-3e09-48ea-a788-cae97f2a09b6","6fd9cf95-63b3-4bfe-bca6-e782ce6b7d38","e3566b10-d7b3-499e-9167-e551e7e7a2d9","be66231f-16b1-42b1-829c-2035218ebc86","565681f2-2a74-4bd7-b3e6-5860154a24c4","d7ddd7fa-1d0e-4159-aa9c-784430d77a19","c7f5ccff-8a58-493c-a2e8-fb1af72ac7da","8791d958-488d-43cb-954e-e3b368a4b13a","794bfade-dace-4803-a25e-1c52b87ad8f3","bf88ec85-e37b-4079-b23e-a94fab167eb3","944b35fb-1d3f-42cf-b512-f77e2a20aa08","bd790fb8-faf5-45b5-adc9-f36eb6eedc0d","f674b4c8-1902-48a4-9cd0-9c13d6b23c1d","c0014c84-7ba7-45d9-9a50-41938595b451","6d9144d7-2b92-44be-8afc-7b7f55f80e50","2ea181dc-e93f-4772-8bb5-c7db99e210c1","2af68d71-fac9-4925-a4a5-420e6c573701","bc9c5901-c73f-4aec-b197-63daa6f8a42e","4ee0f0cc-ed8b-4064-96fa-9b4ab0fccaa2","ac171d82-92a5-4fa8-807e-4f90abf42f4f","9f93151d-b8b6-4953-8d5e-214bd3115cfb","2b8b52d3-aedd-4267-a965-b16e1f5dfb2c","66520c30-f4a3-4bb9-9edb-876316c57a62","518e4e54-c14d-456c-95de-affbef5f6512","7e1713b4-885b-4e23-9643-92ae6f6ce16e","522d7461-2ce6-4f43-b633-91be494f404d","93371cd8-a622-45d8-b3b5-c5c16f57c908","fb67fbe6-69f0-46ff-985f-9ee2047b7976","7bc398f8-b8ea-450d-bbd6-8f1577fa6ec1","07f92586-3100-4ecb-9346-715405e16cb9","b6efbaa0-682e-4431-892f-6406ac542b1c","36e4f03e-c1a8-4634-97ea-e0d3027e1d23","4b2adb88-c5f7-4ab2-a995-463576ea9df0","fcf4686b-9061-4edc-8b99-79b16829e206","b2b686f2-0342-405d-8168-834730ac9036","2e82048d-05a9-4307-a146-02a9e2d50012","17bc9653-a7e1-47fc-9feb-f2eacf90cfd3","9c77f25a-ed3c-4b89-acbf-900f39c558e5","2397f965-4153-4d6c-b810-3032cd9e665a","a6bde0ec-e694-4422-9f42-fd647e9f6891","18e6a588-2152-4d24-a649-c6888f71f8f2","3b614b0c-947b-44cd-a58b-b7ef40bb0557","f6d3d1aa-f9a4-4b60-8db9-958eb107d338","8b552dcd-a59d-439b-a244-0330c5a32c28","c042be12-aebf-46d4-a53a-a6a848adbcd0","900e99e6-297d-492d-a130-e4b5e818566d","311abc5d-86e3-4dbb-8fc0-cb4f009b215e","917d96f0-f2a2-4a3c-ba7f-2149a316cb62","c79ece95-5e7c-4b09-8c2e-a04eeb25eb55","37bf6889-e665-41bc-96e6-c991cf8c4e60","6a3490bc-b596-4308-8a88-d7f803eb443c","3f5527f5-23e9-4b67-a607-fac6a706a4e7","005f086a-07cf-4dc3-aa96-33037f17a491","f4399641-74ef-4925-80ba-ac5baf4e991e","f2defd5e-3a88-4612-b9a1-3fa42f9d854d","4a704735-4cbe-48ce-bdbf-379e1e82e375","53ec6a4f-eab5-48c9-8bc4-794c7578ddad","69bcccb3-7278-4209-8786-afaf1d441b44","e75bcdae-2b8c-47c3-9514-f8cbd61a9394","81b53849-1f66-4d0b-b05e-98a6190c0cb2","958a8d5b-c862-46d3-8dea-6e2cbc6de184","25c4a1a1-52d3-41bd-8d2b-66520b04eaec","ec4b8668-8487-4f44-a096-a58a369c1420","fc9628e0-fff3-4f54-8432-3f81913dd4da","1dcc6120-38a2-44c8-8f13-37a453d0146b","adb1a07d-af42-46d1-a0db-b7917109a7a0","ece831dc-05e7-40d0-be60-6097c6ac9858","4a7da4db-3f2e-4fb8-9a7e-92eb25049f8d","b4bba555-a39c-4783-af17-9b20c1fac8ec","6dae5df3-c49b-458d-8f18-3712c99faebd","dcfad0ba-8318-4715-ad18-701ffa7fb307","b2676dde-1fbc-4e9f-bbaa-db4c40fedee6","cf835bd0-dff6-4cb0-9052-bbb50daf6312","95b980c3-5969-47ba-a4da-ac0e3904226c","64852c46-e0dd-4bd7-ab69-0df9efd51afc","fadc135b-e0de-476f-94d7-6bb4ed655deb","44da29c7-91d1-4a5c-9380-e702fc8cfe4d","6af7436b-8cfe-40b5-8c70-38e3789612ed","4c5e7d59-9471-43ff-8e6d-686a1aeb7830","5076ef16-b9b5-4516-a35f-7093743d423a","9f565318-5464-48b9-99e2-818ae64d52cb","db172c9f-3af5-482d-a2c1-b08ac9231698","4cb74ca4-b397-42b3-82e6-9fb94a96c459","06d9927f-8617-4090-8f96-4c172a3202ee","6f68d8da-502e-4a79-b8e9-30faa9237ca4","28404f52-d4e4-439d-b67f-b04fddc15b0b","0380d8c7-e181-4ebd-994e-e2aed078a2e4","dceb63ba-a711-493a-b7d8-9b03a9b3119b","5b612152-7e7c-4045-bd09-9b4d1880c040","da874395-d2c6-4bd8-accc-5260dc856895","0e8dae27-51c3-4291-9be9-9ed5fa95fe2c","2db9833b-f91e-42a8-b091-657713687781","e06d8706-4890-45d5-9a10-7b3fd1b3c781","67be97e7-2f53-44c9-bdee-68ac1f93b360","6eb92e8d-4653-4586-ad43-9e967bcd2db0","9cb1db82-f094-48f0-a7be-40bc6de84af5","bdb8097d-ae9c-492e-8e9f-1b4658c8253a","a0a226cd-40af-4617-be8f-67f3d603ba73","64d69fc9-18ff-4dc6-9175-15318688ac25","4908ecd3-e1a7-48d2-b9b7-afd7bb180b83","5b7d01bd-96cb-403b-9875-3d1a0099f597","a79040b4-70d1-48f5-a5f6-44dbee81cbb0","2e441b2c-c6ef-4c30-9300-7fccd131e9dd","6f6ac83d-e2f9-4bd5-a58b-1c3662cb3d13","f107d1da-49b1-4b90-90db-764808650bcd","b3fbd6d3-a902-43e8-840b-cc27bc76550d","fad782a1-d97c-4c97-8ff4-edcacea71c08","db27418d-1471-4860-96c5-edd06e521273","c5cf6dd4-ddde-47c2-a64e-29ffbb05583b","9b367580-1467-4779-8cae-c5ad79a09d9f","3fa44c1e-aa1d-4335-8645-6c25f9203739","71057ef2-e046-478d-b19b-b1f2b69e8bd1","f8badbc2-5760-4fe0-adba-2d7746b7227b","e9b773eb-f215-4908-94f4-211e6d32bb0a","5e3f8033-7d99-4e4d-aa3a-f96ae2cf6fab","2e6cdc39-80c3-475b-b3c8-7f22380725ec","03dd7f39-72f9-4627-901b-7592fe8f8ba0","424f62f0-122b-4da4-86e7-5521ad594d97","e9484c0a-339d-4fa0-b1b1-45bd2a5d3a7c","8aca0df5-bf0d-437b-94ba-b4c24b241ac7","c408985d-634f-4228-8e74-a94c30dc799d","2c52b49a-6ac1-41d3-88f2-1f58bb0866a8","74f64a97-e4ba-4242-8087-adf93d7178c3","f0d50596-b1f8-4a2f-808f-75d923aea843","fdeff2e2-d9ad-4697-b5db-451e584c6aa4","38fa13c8-4c94-401e-9c05-ecfa783d5ad2","3379a189-7121-4413-8756-db27669a222f","024b2a78-18ae-47a3-83cd-79e958033347","0b0f7fcf-ca31-4e6c-8e46-18d21b63787c","8d431f16-8d26-46ce-9467-529b27ebb484"],"widgets":{"application/vnd.jupyter.widget-state+json":{"state":{},"version_major":2,"version_minor":0}},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30761,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/felixonyangoo/stack-overflow-2024-survey-analysis?scriptVersionId=197301590\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"#### Import Libraries.","metadata":{"panel-layout":{"height":43.224430084228516,"visible":true,"width":100}}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n","metadata":{"scrolled":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import plotly.express as px\nimport plotly.graph_objects as go\n\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected = True)\n","metadata":{"panel-layout":{"height":0,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Load .csv File for Analysis in Pandas","metadata":{"panel-layout":{"height":43.224430084228516,"visible":true,"width":100}}},{"cell_type":"code","source":"def open_csv_file(file_path):\n    try:\n        pd.read_csv(file_path)\n    except FileNotFoundError: \n        print('Invalid file path.')\n\n    else:\n        return pd.read_csv(file_path)\n        ","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"file_path = r\"D:\\Python\\Stack 2024\\survey_results_public.csv\"\n\ndf = open_csv_file(file_path)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pd.set_option('display.max_columns', None)","metadata":{"panel-layout":{"height":0,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pd.set_option('display.max_rows', None)","metadata":{"panel-layout":{"height":0,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pd.options.mode.copy_on_write = True","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.head()","metadata":{"panel-layout":{"height":884.6590576171875,"visible":true,"width":100},"scrolled":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"schema_file_path = r\"D:\\Python\\Stack 2024\\survey_results_schema.csv\"\nschema_df = open_csv_file(schema_file_path)\nschema_df.set_index('question')","metadata":{"panel-layout":{"height":2706.988525390625,"visible":true,"width":100},"scrolled":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.info()","metadata":{"panel-layout":{"height":0,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.describe()","metadata":{"panel-layout":{"height":266.07952880859375,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### ","metadata":{"panel-layout":{"height":17.017044067382812,"visible":true,"width":100}}},{"cell_type":"markdown","source":"### Functions used in Analysis","metadata":{"panel-layout":{"height":44.07670211791992,"visible":true,"width":100}}},{"cell_type":"markdown","source":"##### Selecting Columns of interest for Analysis","metadata":{"panel-layout":{"height":40.92329406738281,"visible":true,"width":100}}},{"cell_type":"code","source":"def make_data_frame(data_frame_columns, data_frame):\n    \"\"\" Creates a data frame from the columns selected for analysis.\"\"\"\n    return data_frame[data_frame_columns]\n    ","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##### Clean Data(Drop Nan Values) ","metadata":{"panel-layout":{"height":40.92329406738281,"visible":true,"width":100}}},{"cell_type":"code","source":"def clean_data(made_data_frame):\n    \"\"\" Cleans a data frame by dropping null values. \"\"\"\n    return made_data_frame.dropna()\n    ","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##### Create Analysis Categories ('Professional Developer', 'Learning to Code', 'Other Coders', 'All Respondents')","metadata":{"panel-layout":{"height":40.92329406738281,"visible":true,"width":100}}},{"cell_type":"code","source":"def get_category_of_interest(cleaned_data, category_filter='All Respondents'):\n    \"\"\" Filters a data frame  to get the category of interest.\"\"\"\n    \n    filter_criteria = ['Professional Developer', 'Learning to Code', 'Other Coders', 'All Respondents']\n    try:\n        if category_filter not in filter_criteria:\n            raise ValueError('Invalid filter criteria provided.')\n\n        if category_filter == 'Professional Developer':\n            return cleaned_data.loc[cleaned_data[cleaned_data.columns[0]] == 'I am a developer by profession']\n\n        elif category_filter == 'Learning to Code':\n            return cleaned_data.loc[cleaned_data[cleaned_data.columns[0]] == 'I am learning to code']\n\n        elif category_filter == 'Other Coders':\n            return cleaned_data.loc[~(\n                (cleaned_data[cleaned_data.columns[0]] == 'I am a developer by profession') |\n                (cleaned_data[cleaned_data.columns[0]] == 'I am learning to code')\n            )]\n\n        else:\n            return cleaned_data  \n\n    except ValueError as e:\n        print(e)\n        return None  \n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##### Count Responses for an Item","metadata":{"panel-layout":{"height":40.92329406738281,"visible":true,"width":100}}},{"cell_type":"code","source":"def count_responses(category_of_interest_df):\n    \"\"\" Counts responses, returns each response and the number it appears.\"\"\"\n    counter = Counter()\n    for item in category_of_interest_df[category_of_interest_df.columns[1]]:\n        if pd.notnull(item):\n            counter.update(item.split(';'))\n    return counter.most_common()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##### Convert Counter Output to a Data Frame","metadata":{"panel-layout":{"height":40.92329406738281,"visible":true,"width":100}}},{"cell_type":"code","source":"def convert_to_df(counted_responses, columns=None):\n    \"\"\" Converts a series to a data frame with predefined column names.\"\"\"\n    if columns is None:\n        columns = globals().get('report_headers', None)\n    if columns is None:\n        df = pd.DataFrame(counted_responses)  # No column headers\n    else:\n        # if len(counted_responses[0]) != len(columns):\n        #    raise ValueError(\"The number of columns does not match the data length.\")\n        df = pd.DataFrame(counted_responses, columns=columns)\n        \n        df.index.name = None   # Remove index column label\n    return df","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##### Set the FIrst Column as Index","metadata":{"panel-layout":{"height":40.92329406738281,"visible":true,"width":100}}},{"cell_type":"code","source":"def set_dataframe_index(converted_df):\n    \"\"\" Sets the first column of a  data frame as the index.\"\"\"\n    return converted_df.set_index(converted_df.columns[0]) \n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##### Calculating Percentages","metadata":{"panel-layout":{"height":40.92329406738281,"visible":true,"width":100}}},{"cell_type":"code","source":"def calculate_percentages(indexed_data, total_responses):\n    \"\"\" Calculate the number of responses as a percentage of respondents.\"\"\"\n    return round(indexed_data.div(total_responses) *100, 2)\n    ","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##### Get Responses and Percentages Data Frame","metadata":{"panel-layout":{"height":40.92329406738281,"visible":true,"width":100}}},{"cell_type":"code","source":"def get_response_count_with_percentages(data_frame, data_frame_columns, report_headers, category_filter='filter criteria'):\n    \"\"\" Gets responses, their count, and the count as a percentage of respondents number. \"\"\"\n    \n    made_data_frame = make_data_frame(data_frame_columns, data_frame)\n\n    cleaned_data = clean_data(made_data_frame)\n\n    category_of_interest_df = get_category_of_interest(cleaned_data, category_filter)\n\n    total_responses = len(category_of_interest_df)\n\n    item_response_count = count_responses(category_of_interest_df)\n\n    item_response_count_df = convert_to_df(item_response_count)\n\n    indexed_item_response_count_df = set_dataframe_index(item_response_count_df)\n\n    calculated_item_response_percentage = calculate_percentages(indexed_item_response_count_df, total_responses)\n\n    item_response_count_percentage_df = pd.concat([indexed_item_response_count_df, calculated_item_response_percentage], axis=1)\n    \n    item_response_count_percentage_df.columns = list(indexed_item_response_count_df) + [f'% of {report_headers[1]}']\n\n    return item_response_count_percentage_df\n  ","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##### Get Item Counts per Data Frame Column","metadata":{"panel-layout":{"height":40.92329406738281,"visible":true,"width":100}}},{"cell_type":"code","source":"def get_item_counts_per_df_column(data_frame=df, data_frame_column=['column_name']):\n    \n    series = make_data_frame(data_frame_column, data_frame) \n    \n    cleaned_data = clean_data(series)\n    \n    item_counts = cleaned_data.value_counts()\n    \n    return item_counts.to_frame()\n    ","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##### Get Responses and Percentages for Multiple Columns","metadata":{"panel-layout":{"height":40.92329406738281,"visible":true,"width":100}}},{"cell_type":"code","source":"\ndef get_a_data_frame_of_percentage_responses_in_many_columns(data_frame, data_frame_columns, new_columns_names, respondents_category):\n    \n    No_columns = len(data_frame_columns)\n    \n    columnn_combinations = [data_frame[[data_frame_columns[0], data_frame_columns[i]]] for i in range(1, No_columns)]\n    \n    cleaned_columns_combinations = [clean_data(columnn_combinations[i]) for i in range(len(columnn_combinations))]\n    \n    filtered_cleaned_columns_combinations= [\n        get_category_of_interest(cleaned_columns_combinations[i], category_filter=respondents_category)\n        for i in range(len(cleaned_columns_combinations))\n    ]\n    \n    respondents_per_developer_category = [\n        len(filtered_cleaned_columns_combinations[i])\n        for i in range(len(filtered_cleaned_columns_combinations))\n    ]\n    response_counts_per_cat = [\n        count_responses(filtered_cleaned_columns_combinations[i])\n        for i in range(len(filtered_cleaned_columns_combinations))\n    ]\n    \n    response_counts_per_cat_dfs = [convert_to_df(response_counts_per_cat[i]) for i in range(len(response_counts_per_cat))]\n    \n    response_indexed_dfs = [set_dataframe_index(response_counts_per_cat_dfs[i]) for i in range(len(response_counts_per_cat_dfs))]\n    \n    percentage_respondents = [\n        calculate_percentages(df, totals)\n        for df,totals in zip(response_indexed_dfs, respondents_per_developer_category)\n    ]\n    \n    # Concatenating the data frames\n    concatenated_percentages_df = pd.concat(percentage_respondents, axis='columns')\n    \n    concatenated_percentages_df.columns = new_columns_names\n\n    concatenated_percentages_df.index.name = None\n    \n    return concatenated_percentages_df\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##### Get a Pivot Table of Counts","metadata":{"panel-layout":{"height":40.92329406738281,"visible":true,"width":100}}},{"cell_type":"code","source":"def pivot_and_count(data_frame, data_frame_columns=None, grouping_columns=None):\n    \n    data = data_frame[data_frame_columns]\n    \n    cleaned_data = clean_data(data)\n    \n    grouped_data = cleaned_data.groupby(grouping_columns).size()\n    \n    return grouped_data.unstack()\n    ","metadata":{"scrolled":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##### Get Percentages based on Row Totals","metadata":{"panel-layout":{"height":40.92329406738281,"visible":true,"width":100}}},{"cell_type":"code","source":"def calculate_percentage_by_row_totals(pivoted_data_frame):\n    \n    row_totals = pivoted_data_frame.sum(axis=1)\n    return round(pivoted_data_frame.div(row_totals, axis='rows')*100, 2)\n    ","metadata":{"scrolled":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##### Rename Columns Headers","metadata":{"panel-layout":{"height":40.92329406738281,"visible":true,"width":100}}},{"cell_type":"code","source":"def rename_column_header_percentage(data_frame):\n    \n    data_frame.columns=[f'% {i}' for i in data_frame.columns]\n    return data_frame\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##### Set Predefined Categorical Index","metadata":{"panel-layout":{"height":40.92329406738281,"visible":true,"width":100}}},{"cell_type":"code","source":"def sort_categorical_index(data_frame, index_order):\n    \n    data_frame.index = pd.CategoricalIndex(data_frame.index, categories=index_order, ordered=True)\n    return data_frame.sort_index()\n        ","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##### Get Percentages Pivoted by Columns","metadata":{"panel-layout":{"height":40.92329406738281,"visible":true,"width":100}}},{"cell_type":"code","source":"def percentages_pivoted_by_column(data_frame=df, data_frame_columns=None, grouping_columns=None):\n    \n    if data_frame_columns is None or grouping_columns is None:\n        raise ValueError(\"You must provide both 'data_frame_columns' and 'grouping_columns'.\")\n        \n    pivoted_data_frame = pivot_and_count(data_frame=df, data_frame_columns=data_frame_columns, grouping_columns=grouping_columns)\n    \n    calculated_row_percentages = calculate_percentage_by_row_totals(pivoted_data_frame)\n    \n    return rename_column_header_percentage(calculated_row_percentages)\n    ","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##### Get Multi Indexed Data Frame (Developer Category)('Responses', ' % No Responses')","metadata":{"panel-layout":{"height":40.92329406738281,"visible":true,"width":100}}},{"cell_type":"code","source":"\ndef get_multi_indexed_response_perce_cat(data_frame, data_frame_columns, report_headers, respondents_categories):\n    \n    all_responses =  [get_response_count_with_percentages(data_frame, data_frame_columns, report_headers, category_filter=respondent_category)\n                      for respondent_category in respondents_categories]\n    \n    all_categories_combined = pd.concat(all_responses, axis='columns')\n    \n    headers = []\n    for category in respondents_categories:\n        headers.extend([(category, 'No Respondents'), (category, '% of No Respondents')])\n    \n    all_categories_combined.columns = pd.MultiIndex.from_tuples(headers)\n    \n    return all_categories_combined\n    ","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##### Get Multi Indexed Data Frame (Developer Category)( % No Responses')","metadata":{"panel-layout":{"height":40.92329406738281,"visible":true,"width":100}}},{"cell_type":"code","source":"\ndef get_multi_index_perce_combined_category_dfs(data_frame, data_frame_columns, new_columns_names):\n    headers=[]\n    \n    # Initial implementation.\n    # for category in respondents_categories:\n       # headers.extend([(category,' % AI Search Worked With'),(category,'% AI Search Want to Worked With'),(category,' % AI Search Admired')])\n    \n    for category in respondents_categories:\n        headers.extend([(category,name) for name in new_columns_names])\n    \n    perce_cats_dfs = [\n        get_a_data_frame_of_percentage_responses_in_many_columns(data_frame, data_frame_columns, new_columns_names, respondents_category) \n        for respondents_category in respondents_categories\n    ]\n    \n    combined_perce_cats_dfs = pd.concat(perce_cats_dfs, axis='columns')\n    \n    combined_perce_cats_dfs.columns = pd.MultiIndex.from_tuples(headers)\n    \n    return combined_perce_cats_dfs\n        ","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##### Get a Unique list From a Column with Many Items in a \"Cell\"","metadata":{"panel-layout":{"height":40.92329406738281,"visible":true,"width":100}}},{"cell_type":"code","source":"def get_unique_column_items(data_frame, column_name, sep):\n    \"\"\" \n    Return a unique list of objects in data frame column.\n    Get columns of interest.\n    split the element in the column based on the separator.\n    Explode the lists from split then get the unique array.\n    Clean the array.\n    \n    \"\"\"\n    column_series = data_frame[column_name]\n    splited_column_items = column_series.str.split(sep)\n    exploded_col = splited_column_items.explode()\n    unique_series = exploded_col.unique()\n    return unique_series[(pd.notna(unique_series)) & (unique_series != 'nan')]","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##### Calculate Median Salary","metadata":{"panel-layout":{"height":40.92329406738281,"visible":true,"width":100}}},{"cell_type":"code","source":"\ndef median_yr_sal_per_tech(data_frame, analysis_columns, report_col, tech_list):\n    \"\"\"\n    Returns median salary for a each element of an array from unique elements of a dataframe column.\n    Provide a unique array_list of elements in dataframe  column of interest.\n    Make a data frame and clean the data(drop null rows.)\n    For each element on the unique array_list, filter the made dataframe and calculate its median annual compensation.\n    Make a list of unique array_list elements and their median salaries; convert it into df and sort accordingly.\n    \n    \"\"\"\n    median_sal_list = []\n    for lang in tech_list:\n        made_df = make_data_frame(analysis_columns, data_frame)\n        cleaned_data = clean_data(made_df)\n        filtered_df = get_category_of_interest(cleaned_data, category_filter='All Respondents')\n        item_filtered_df = filtered_df.loc[filtered_df[filtered_df.columns[1]].str.contains(lang, regex=False)]\n        median_sal = item_filtered_df[item_filtered_df.columns[2]].median()\n        median_sal_list.append((lang, median_sal))\n    \n    return pd.DataFrame(median_sal_list, columns=report_col).sort_values(by = report_col[1], ascending=True).set_index(report_col[0]) \n    #.plot(kind='barh', figsize=(10,9))","metadata":{"jp-MarkdownHeadingCollapsed":true,"scrolled":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##### Create Horizontal Bar Chart with Minimum Clutter in Matplolib","metadata":{"panel-layout":{"height":40.92329406738281,"visible":true,"width":100}}},{"cell_type":"code","source":"\ndef create_custom_barh(x_values, y_values, ch_title=\"\", lab_txt_pre='%', figsize=(8,3), text_color='black', face_color='snow', bar_color='dodgerblue'):\n    \"\"\" Returns a clean horizontal bar chart. \"\"\"\n    # Create figure and horizontal bars\n    fig, ax = plt.subplots(figsize=figsize, dpi=150, facecolor=face_color)\n    ax.barh(x_values, y_values, color=bar_color)\n    \n    # Add labels to the bars\n    if lab_txt_pre == \"%\":\n        for container in ax.containers:\n            ax.bar_label(container, labels=[f\" {v:,.2f} {lab_txt_pre}\" for v in container.datavalues], label_type='edge', fontsize=6, color=text_color)\n\n    elif lab_txt_pre == \"$\":\n        for container in ax.containers:\n            ax.bar_label(container, labels=[f\" {lab_txt_pre} {v:,.1f} \" for v in container.datavalues], label_type='edge', fontsize=6, color=text_color)\n\n    else:\n        for container in ax.containers:\n            ax.bar_label(container, labels=[f\" {v}\" for v in container.datavalues], label_type='edge', fontsize=6, color=text_color)\n    \n    \n    # Hide borders from the chart\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.spines['left'].set_visible(False)\n    ax.spines['bottom'].set_visible(False)\n\n    # Calculate the length of the longest y-tick label\n    longest_label = max([len(str(label)) for label in x_values])\n\n    # Dynamically adjust the left margin based on the longest y-tick label\n    left_margin_extension = longest_label * 0.0095  # Adjust multiplier for desired space\n    \n    # Add dashed lines between horizontal bars using figure-relative coordinates\n    for y in np.arange(len(x_values) - 1) + 0.5:\n        ax.plot([-left_margin_extension, 1], [y, y], color='lightgray', linestyle='--', linewidth=0.5, transform=ax.get_yaxis_transform(), clip_on=False)\n    \n    # Extend the x-limits of the dashed lines to match the labels and make sure bars are fully visible\n    ax.set_xlim(left=0, right=max(y_values) * 1.1)\n    \n    # Adjust the plot to give space for the lines to extend past the y-tick labels\n    ax.margins(x=0.2)  # Increase left margin\n    \n    # Hide axes tick marks\n    ax.tick_params(axis='y', which='both', left=False, right=False)\n    ax.set_xticks([])\n    \n    # Set the background color of the plot area\n    ax.set_facecolor(face_color)\n    \n    # Set and format title.\n    ax.set_title(ch_title, fontsize=8, weight='bold', color=text_color)\n    \n    # Set the yticks explicitly and then set the labels\n    ax.set_yticks(np.arange(len(x_values)))\n    ax.set_yticklabels(x_values, fontsize=6, color=text_color)\n    \n    # Ensure layout is adjusted properly\n    plt.tight_layout()\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##### Make Horizontal Bars from Multi Indexed Data Frame with Button to Switch btwn Categories","metadata":{"panel-layout":{"height":40.92329406738281,"visible":true,"width":100}}},{"cell_type":"code","source":"def plot_multi_indexed_df(data_frame, worked_with_col, ch_title, height=1500, width=1100, plot_bgcolor=\"white\", paper_bgcolor=\"lightgray\",\n                          marker_color='dodgerblue'):\n    \n    # Get the unique respondent categories (these should be level 0 if MultiIndex exists)\n    groups = data_frame.columns.get_level_values(0).unique()\n    \n    # We are interested only in '% Language Worked With'\n    worked_with_col = worked_with_col\n    \n    # Create an empty figure\n    fig = go.Figure()\n    \n    # Create traces for each group (respondents category) for '% Language Worked With'\n    for group in groups:\n        # Select data for the current group\n        df_group = data_frame[group][worked_with_col]\n        \n        # Add a trace for the horizontal bar chart\n        fig.add_trace(go.Bar(\n            x=df_group[::-1],  # Horizontal bar, so x is the data\n            y=df_group.index[::-1],  # y-axis is the languages\n            text=df_group[::-1],\n            texttemplate='%{text:.2f} %',\n            textposition='auto',\n            marker_color=marker_color,\n            name=f'{group}',\n            orientation='h',  # Horizontal bar chart\n            visible=(group == groups[0]),  # Show only the first group initially\n            marker=dict(cornerradius=2.5),\n            hovertemplate=(\n                f'<i>Category</i>: {group}<br>'  # Show category (respondent group)\n                '<i>Percentage</i>: %{x:.1f}%<br>'  # Show the percentage\n                '<i>Item</i>: %{y}'  # Show the item (y-axis)\n            )\n            # hovertemplate='<i>Respondents</i> : %{x:.1f}%'+'<br><i>item</i> : %{y}'\n        ))\n    \n    # Create buttons for toggling visibility between groups\n    buttons = []\n    for i, group in enumerate(groups):\n        visibility = [False] * len(groups)\n        visibility[i] = True  # Make only the current group's trace visible\n        \n        button = dict(\n            method=\"update\",\n            label=group,\n            args=[{\"visible\": visibility}],  # Show only the current trace\n        )\n        buttons.append(button)\n    \n    # Update the layout with individual buttons instead of dropdown\n    fig.update_layout(\n        updatemenus=[{\n            \"type\": \"buttons\",\n            \"buttons\": buttons,\n            \"direction\": \"right\",\n            \"x\": 0.0, \n            \"xanchor\": \"left\",\n            \"y\": 1.015,  # Position buttons above the chart\n            \"yanchor\": \"bottom\",\n            \"pad\": {\"r\": 10, \"t\": 10}  # Padding around the buttons\n        }],\n        xaxis=dict(showticklabels=False, showgrid=False, zeroline=False),\n        yaxis=dict(showticklabels=True, showgrid=False, zeroline=True),\n        width=width,\n        height=height,\n        margin=dict(t=100,b=0,l=10,r=0),  # Adjust the top margin to fit the buttons\n        plot_bgcolor=plot_bgcolor,  # Set the plot background color\n        paper_bgcolor=paper_bgcolor  # Set the chart background color\n    )\n    \n    fig.update_layout(\n    title={\n        'text': ch_title,  # Title text underlined\n        'y': 0.990,  # Vertical position\n        'x': 0.005,  # Horizontal position (centered)\n        'xanchor': 'left',  # X anchor position\n        'yanchor': 'top',  # Y anchor position\n        'font': {'size': 15, 'color': 'black', 'family': 'sans-serif', 'weight': 'bold'},  # Bold title\n    }\n    )\n    fig.show()\n","metadata":{"scrolled":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##### Create horizontal stacked bars from a Data Frame in Plotly","metadata":{"panel-layout":{"height":40.92329406738281,"visible":true,"width":100}}},{"cell_type":"code","source":"\n\ndef make_plotly_horizontal_stacked_bars_from_df(data_frame, ch_title, paper_bgcolor=\"mintcream\", plot_bgcolor=\"mintcream\", width=1100, height=700):\n    \n    fig = px.bar(\n        data_frame, x=data_frame.columns, y=data_frame.index, orientation=\"h\",\n        color_discrete_sequence=['rgba(38, 24, 74, 0.8)', 'rgba(71, 58, 131, 0.8)', 'rgba(122, 120, 168, 0.8)', 'rgba(164, 163, 204, 0.85)',\n        'rgba(190, 192, 213, 1)'],\n        text_auto=True,\n        # color_discrete_sequence=px.colors.qualitative.Plotly\n    )\n    \n    fig.update_layout(\n        legend=dict(\n            orientation=\"h\",  # Horizontal legend\n            x=-0.45,            # Center the legend horizontally\n            y=1.1,           # Position the legend below the chart\n            xanchor='left',  # Anchor the legend from the center\n            yanchor='top',      # Anchor the y-position from the top\n        ),\n        \n        margin = dict(t=150, l=0, r=0, b=0),\n        width=1100,\n        height=700,\n        autosize=True,\n        paper_bgcolor=paper_bgcolor,\n        plot_bgcolor=plot_bgcolor,  # Set the plot background color\n        \n        title=dict(\n            text=ch_title,  # Title text \n            y=0.95,  # Vertical position\n            x=0.02,  # Horizontal position (centered)\n            xanchor='left',  # X anchor position\n            yanchor='top',  # Y anchor position\n            font=dict(size=15, color='black', family='sans-serif', weight='bold')  # Bold title\n        )\n    )\n       \n    fig.update_layout(\n        legend_title_text=''  # Set legend title to an empty string\n    )\n    \n    fig.update_yaxes(title='', showticklabels=True)\n    \n    fig.update_xaxes(title='', showticklabels=False)\n    \n    fig.show()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##### Make Pie or Doughnut charts(Possible to Pull Pie of Interest)","metadata":{"panel-layout":{"height":40.92329406738281,"visible":true,"width":100}}},{"cell_type":"code","source":"\ndef doughtnut_plot(labels, values, ch_title, hole=0.5, pull_section=1, offset=0.2, width=1100, height=800):\n    \n    pull=[0]*len(labels)\n    if pull_section not in range(len(labels)):\n        raise Exception(f\"Sorry, please enter an interger  0 <= pull_section <= {len(labels)-1}.\")\n    else:\n        pull[pull_section]=offset\n    \n    fig = go.Figure(data = [go.Pie(labels=labels, values=values, hole=hole, insidetextorientation='radial', pull=pull,\n                                   hoverinfo='label+percent+value',  # Control what default hover info to show\n                                   hovertemplate='<i>item</i>: %{label}<br><i>Percentage</i>: %{percent}<br><i>Value</i>: %{value}<extra></extra>'\n                                  )]\n                   )\n    \n    fig.update_layout(\n        title={\n            'text': ch_title,  # Title text.\n            'y': 0.95,  # Vertical position\n            'x': 0.02,  # Horizontal position (centered)\n            'xanchor': 'left',  # X anchor position\n            'yanchor': 'top',  # Y anchor position\n            'font': {'size': 15, 'color': 'black', 'family': 'sans-serif', 'weight': 'bold'},  # Bold title\n        },\n        \n        width=width, height=height,  # Chart size\n        margin=dict(t=50, b=0, l=0, r=0), # Remove margins\n        paper_bgcolor=\"mintcream\",  # Set the chart background color\n    \n        legend=dict(\n            orientation=\"h\",  # Horizontal legend\n            x=0.5,            # Center the legend horizontally\n            y=-0.01,           # Position the legend below the chart\n            xanchor='center',  # Anchor the legend from the center\n            yanchor='top'      # Anchor the y-position from the top\n        )\n    )\n    \n    fig.show()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### ","metadata":{"panel-layout":{"height":18.039772033691406,"visible":true,"width":100}}},{"cell_type":"markdown","source":"#### Which of the following options best describes you today? For the purpose of this survey, a developer is \"someone who writes code\" ","metadata":{"panel-layout":{"height":43.224430084228516,"visible":true,"width":100}}},{"cell_type":"code","source":"\nrespondents_des = get_item_counts_per_df_column(data_frame=df, data_frame_column=['MainBranch'])\nrespondents_des.style.format(\"{:.0f}\").bar(cmap='tab20c')","metadata":{"panel-layout":{"height":196.64772033691406,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### What is your age?","metadata":{"panel-layout":{"height":43.224430084228516,"visible":true,"width":100}}},{"cell_type":"code","source":"\ndata_frame = df\ndata_frame_columns = ['MainBranch', 'Age']\nreport_headers = ['', 'No Respondents']\nrespondents_categories = ['Professional Developer', 'Learning to Code', 'Other Coders', 'All Respondents']\n\nrespondents_age_groups = get_multi_indexed_response_perce_cat(data_frame, data_frame_columns, report_headers, respondents_categories)\nall_respondents_age = respondents_age_groups['All Respondents']","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"index_order = ['Under 18 years old','18-24 years old','25-34 years old','35-44 years old','45-54 years old','55-64 years old','65 years or older',\n               'Prefer not to say']\n\nall_repondents_age = sort_categorical_index(all_respondents_age, index_order)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"x_values = all_repondents_age.index[::-1]\ny_values = all_repondents_age['% of No Respondents'].iloc[::-1]\n\ncreate_custom_barh(x_values, y_values, figsize=(8,4), ch_title=\" Respondents' Age Distribution\", face_color='whitesmoke', bar_color='darkorchid')","metadata":{"panel-layout":{"height":585.9943237304688,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Which of the following best describes the highest level of formal education that you’ve completed?","metadata":{"panel-layout":{"height":43.224430084228516,"visible":true,"width":100}}},{"cell_type":"code","source":"\ndata_frame = df\ndata_frame_columns = ['MainBranch', 'EdLevel']\nreport_headers = ['', 'No Respondents']\nrespondents_categories = ['Professional Developer', 'Learning to Code', 'Other Coders', 'All Respondents']\n\nrespondents_ed_level = get_multi_indexed_response_perce_cat(data_frame, data_frame_columns, report_headers, respondents_categories)\nall_respondents_ed_level = respondents_ed_level['All Respondents']\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"x_values = all_respondents_ed_level.index[::-1]\ny_values = all_respondents_ed_level['% of No Respondents'].iloc[::-1]\n\ncreate_custom_barh(x_values, y_values, figsize=(8,4), ch_title=\" Respondents' Education Levels\", face_color='whitesmoke', bar_color='darkorchid')","metadata":{"panel-layout":{"height":585.9943237304688,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\ndata_frame = df\ndata_frame_columns = ['MainBranch', 'EdLevel']\nreport_headers=[' ', 'No Respondents']\n\nrespondents_education = get_response_count_with_percentages(data_frame, data_frame_columns, report_headers, category_filter='All Respondents').head(10)\nrespondents_education.style.format(\"{:.2f}\").bar(subset='% of No Respondents', cmap='tab20c')","metadata":{"panel-layout":{"height":876.7897338867188,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Which of the following best describes the code you write outside of work?","metadata":{"panel-layout":{"height":43.224430084228516,"visible":true,"width":100}}},{"cell_type":"code","source":"\ndata_frame = df\ndata_frame_columns = ['MainBranch', 'CodingActivities']\nreport_headers = ['', 'No Respondents']\nrespondents_categories = ['Professional Developer', 'Learning to Code', 'Other Coders', 'All Respondents']\n\nrespondents_coding_activities = get_multi_indexed_response_perce_cat(data_frame, data_frame_columns, report_headers, respondents_categories)\nall_respondents_coding_activities = respondents_coding_activities['All Respondents']\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"x_values = all_respondents_coding_activities.index[::-1]\ny_values = all_respondents_coding_activities['% of No Respondents'].iloc[::-1]\n\ncreate_custom_barh(x_values, y_values, figsize=(8,4), ch_title=\" Respondents' Coding Activities\", face_color='whitesmoke', bar_color='darkorchid')","metadata":{"panel-layout":{"height":585.9943237304688,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Which of the following describes your current job, the one you do most of the time?","metadata":{"panel-layout":{"height":43.224430084228516,"visible":true,"width":100}}},{"cell_type":"code","source":"\ndata_frame = df\ndata_frame_columns = ['MainBranch', 'DevType']\nreport_headers = ['', 'No Respondents']\nrespondents_categories = ['Professional Developer', 'Learning to Code', 'Other Coders', 'All Respondents']\n\nrespondents_current_job = get_multi_indexed_response_perce_cat(data_frame, data_frame_columns, report_headers, respondents_categories)\nall_respondents_current_job = respondents_current_job['All Respondents'].sort_values(by = '% of No Respondents', ascending=False)","metadata":{"scrolled":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"x_values = all_respondents_current_job.index[::-1]\ny_values = all_respondents_current_job['% of No Respondents'].iloc[::-1]\n\ncreate_custom_barh(x_values, y_values, ch_title=\"Respondents' Current Job Description\", figsize=(8,13), face_color='whitesmoke', bar_color='darkorchid')","metadata":{"panel-layout":{"height":1881.988525390625,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### NOT including education, how many years have you coded professionally (as a part of your work)? ","metadata":{"panel-layout":{"height":43.224430084228516,"visible":true,"width":100}}},{"cell_type":"code","source":"\ncleaned_pro_years_code = clean_data(df[['MainBranch', 'YearsCodePro']])\n# filtered_set = get_category_of_interest(cleaned_pro_years_code, category_filter='All Respondents')\ncleaned_pro_years_code.loc[cleaned_pro_years_code['YearsCodePro'] == 'Less than 1 year', 'YearsCodePro'] = '0'\ncleaned_pro_years_code.loc[cleaned_pro_years_code['YearsCodePro'] == 'More than 50 years', 'YearsCodePro'] = '50'\ncleaned_pro_years_code['YearsCodePro'] = pd.to_numeric(cleaned_pro_years_code['YearsCodePro'])\n\nbin_size = 5\nmax_val = max(cleaned_pro_years_code['YearsCodePro'])+bin_size\n\n\nlabels = [\"{0} - {1} Years\".format(i, i + bin_size - 1) for i in range(0, max_val - bin_size, bin_size)]\nlabels.append(f\"{max_val-bin_size}+ Years\")\n\ncategorised_set = cleaned_pro_years_code.assign(\n    groups=pd.cut(cleaned_pro_years_code['YearsCodePro'], bins=list(range(0, max_val, bin_size)) + [max_val], labels=labels, include_lowest=True, right=False)\n)\n","metadata":{"scrolled":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data_frame = categorised_set\ndata_frame_columns = ['MainBranch', 'groups']\nreport_headers = ['', 'No Respondents']\nrespondents_categories = ['Professional Developer', 'Learning to Code', 'Other Coders', 'All Respondents']\n\nrespondents_age_groups = get_multi_indexed_response_perce_cat(data_frame, data_frame_columns, report_headers, respondents_categories)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"x_values = respondents_age_groups['All Respondents'].index[::-1]\ny_values = respondents_age_groups['All Respondents']['% of No Respondents'].iloc[::-1]\n\ncreate_custom_barh(x_values, y_values, ch_title=\"Respondents' Proffessional Experience\", figsize=(8,5), face_color='whitesmoke', bar_color='darkorchid')","metadata":{"panel-layout":{"height":730,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Which of the following best describes your current employment status?","metadata":{"panel-layout":{"height":43.224430084228516,"visible":true,"width":100}}},{"cell_type":"code","source":"\ndata_frame = df\ndata_frame_columns = ['MainBranch', 'Industry']\nreport_headers = ['', 'No Respondents']\nrespondents_categories = ['Professional Developer', 'Learning to Code', 'Other Coders', 'All Respondents']\n\ndeveloper_industry = get_multi_indexed_response_perce_cat(data_frame, data_frame_columns, report_headers, respondents_categories)\nall_respondents_industry = developer_industry['All Respondents']\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"x_values = all_respondents_industry.index[::-1]\ny_values = all_respondents_industry['% of No Respondents'].iloc[::-1]\n\ncreate_custom_barh(x_values, y_values, figsize=(8,6), ch_title=\" Respondents' Industry\", face_color='whitesmoke', bar_color='darkorchid')","metadata":{"panel-layout":{"height":873.991455078125,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Which of the following best describes your current employment status?","metadata":{"panel-layout":{"height":43.224430084228516,"visible":true,"width":100}}},{"cell_type":"code","source":"\ndata_frame = df\ndata_frame_columns = ['MainBranch', 'Employment']\nreport_headers = ['', 'No Respondents']\nrespondents_categories = ['Professional Developer', 'Learning to Code', 'Other Coders', 'All Respondents']\n\ndeveloper_work_status = get_multi_indexed_response_perce_cat(data_frame, data_frame_columns, report_headers, respondents_categories)\nall_respondents_work_status = developer_work_status['All Respondents']\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"x_values = all_respondents_work_status.index[::-1]\ny_values = all_respondents_work_status['% of No Respondents'].iloc[::-1]\n\ncreate_custom_barh(x_values, y_values, figsize=(8,4), ch_title=\" Respondents' Employment Status\", face_color='whitesmoke', bar_color='darkorchid')","metadata":{"panel-layout":{"height":585.9943237304688,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Which best describes your current work situation?","metadata":{"panel-layout":{"height":43.224430084228516,"visible":true,"width":100}}},{"cell_type":"code","source":"\ndata_frame = df\ndata_frame_columns = ['MainBranch', 'RemoteWork']\nreport_headers = ['', 'No Respondents']\nrespondents_categories = ['Professional Developer', 'Learning to Code', 'Other Coders', 'All Respondents']\n\nrespondents_work_situation = get_multi_indexed_response_perce_cat(data_frame, data_frame_columns, report_headers, respondents_categories)\nall_respondents_work_situation = respondents_work_situation['All Respondents']\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"x_values = all_respondents_work_situation.index[::-1]\ny_values = all_respondents_work_situation['% of No Respondents'].iloc[::-1]\n\ncreate_custom_barh(x_values, y_values, figsize=(8,3), ch_title=\" Respondents' Current Work Situation\", face_color='whitesmoke', bar_color='darkorchid')","metadata":{"panel-layout":{"height":441.9886169433594,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### What level of influence do you, personally, have over new technology purchases at your organization?","metadata":{"panel-layout":{"height":43.224430084228516,"visible":true,"width":100}}},{"cell_type":"code","source":"\ndata_frame = df\ndata_frame_columns = ['MainBranch', 'PurchaseInfluence']\nreport_headers = ['', 'No Respondents']\nrespondents_categories = ['Professional Developer', 'Learning to Code', 'Other Coders', 'All Respondents']\n\nrespondents_purchase_influ = get_multi_indexed_response_perce_cat(data_frame, data_frame_columns, report_headers, respondents_categories)\nall_respondents_purchase_influ = respondents_purchase_influ['All Respondents']\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"x_values = all_respondents_purchase_influ.index[::-1]\ny_values = all_respondents_purchase_influ['% of No Respondents'].iloc[::-1]\n\ncreate_custom_barh(x_values, y_values, ch_title=\"Respondents' Influence on New Technology Purchase\", figsize=(8,3), face_color='whitesmoke', bar_color='darkorchid')","metadata":{"panel-layout":{"height":441.9886169433594,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### How do you learn to code?","metadata":{"panel-layout":{"height":43.224430084228516,"visible":true,"width":100}}},{"cell_type":"code","source":"\ndata_frame = df\ndata_frame_columns = ['MainBranch', 'LearnCode']\nreport_headers = ['', 'No Respondents']\nrespondents_categories = ['Professional Developer', 'Learning to Code', 'Other Coders', 'All Respondents']\n\nrespondents_learn_code = get_multi_indexed_response_perce_cat(data_frame, data_frame_columns, report_headers, respondents_categories)\nrespondents_learn_code\n","metadata":{"panel-layout":{"height":785.8522338867188,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_multi_indexed_df(\n    data_frame=respondents_learn_code, ch_title='Learning to Code Medium',worked_with_col='% of No Respondents', height=600, width=1100,\n    plot_bgcolor=\"whitesmoke\", paper_bgcolor=\"whitesmoke\"\n)","metadata":{"panel-layout":{"height":1051.9886474609375,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### What online resources do you use to learn to code?","metadata":{"panel-layout":{"height":43.224430084228516,"visible":true,"width":100}}},{"cell_type":"code","source":"\ndata_frame = df\ndata_frame_columns = ['MainBranch', 'LearnCodeOnline']\nreport_headers = ['', 'No Respondents']\nrespondents_categories = ['Professional Developer', 'Learning to Code', 'Other Coders', 'All Respondents']\n\nrespondents_learn_code_online = get_multi_indexed_response_perce_cat(data_frame, data_frame_columns, report_headers, respondents_categories)\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_multi_indexed_df(\n    data_frame=respondents_learn_code_online, ch_title='Online Popular Learn Coding Resources', worked_with_col='% of No Respondents',\n    height=900, width=1100,\n    plot_bgcolor=\"whitesmoke\", paper_bgcolor=\"whitesmoke\"\n)","metadata":{"panel-layout":{"height":1351.9886474609375,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### What is the source of the technical documentation you use most often to learn to code?","metadata":{"panel-layout":{"height":43.224430084228516,"visible":true,"width":100}}},{"cell_type":"code","source":"\ndata_frame = df\ndata_frame_columns = ['MainBranch', 'TechDoc']\nreport_headers = ['', 'No Respondents']\nrespondents_categories = ['Professional Developer', 'Learning to Code', 'Other Coders', 'All Respondents']\n\nrespondents_tech_doc_use = get_multi_indexed_response_perce_cat(data_frame, data_frame_columns, report_headers, respondents_categories)\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_multi_indexed_df(\n    data_frame=respondents_tech_doc_use, ch_title='Popular Technical Documentation to Learn Coding', worked_with_col='% of No Respondents',\n    height=500, width=1100,\n    plot_bgcolor=\"whitesmoke\", paper_bgcolor=\"whitesmoke\"\n)","metadata":{"panel-layout":{"height":951.9885864257812,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### When buying a new tool or software, how do you discover and research available solutions?","metadata":{"panel-layout":{"height":43.224430084228516,"visible":true,"width":100}}},{"cell_type":"code","source":"\ndata_frame = df\ndata_frame_columns = ['MainBranch', 'BuyNewTool']\nreport_headers = ['', 'No Respondents']\nrespondents_categories = ['Professional Developer', 'Learning to Code', 'Other Coders', 'All Respondents']\n\nrespondents_buy_new_tool = get_multi_indexed_response_perce_cat(data_frame, data_frame_columns, report_headers, respondents_categories)\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_multi_indexed_df(\n    data_frame=respondents_buy_new_tool, ch_title='Discovering and Researching New Tool or Software Solution', worked_with_col='% of No Respondents',\n    height=600, width=1100,\n    plot_bgcolor=\"whitesmoke\", paper_bgcolor=\"whitesmoke\"\n)","metadata":{"panel-layout":{"height":1051.9886474609375,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### When asked to provide a recommendation for solving a problem at work with a new tool or software, what has been your most recent choice of the following?","metadata":{"panel-layout":{"height":43.224430084228516,"visible":true,"width":100}}},{"cell_type":"code","source":"\ndata_frame = df\ndata_frame_columns = ['MainBranch', 'BuildvsBuy']\nreport_headers = ['', 'No Respondents']\nrespondents_categories = ['Professional Developer', 'Learning to Code', 'Other Coders', 'All Respondents']\n\nrespondents_buy_vs_build = get_multi_indexed_response_perce_cat(data_frame, data_frame_columns, report_headers, respondents_categories)\nall_respondents_buy_vs_build = respondents_buy_vs_build['All Respondents']\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_multi_indexed_df(\n    data_frame=respondents_buy_vs_build, ch_title='Building or Buying New Tool or Software', worked_with_col='% of No Respondents',\n    height=400, width=1100,\n    plot_bgcolor=\"whitesmoke\", paper_bgcolor=\"whitesmoke\"\n)","metadata":{"panel-layout":{"height":851.9885864257812,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### What product feature do you care about most when endorsing a technology purchase?","metadata":{"panel-layout":{"height":43.224430084228516,"visible":true,"width":100}}},{"cell_type":"code","source":"\ndata_frame = df\ndata_frame_columns = ['MainBranch', 'TechEndorse']\nreport_headers = ['', 'No Respondents']\nrespondents_categories = ['Professional Developer', 'Learning to Code', 'Other Coders', 'All Respondents']\n\nrespondents_feature_endorse = get_multi_indexed_response_perce_cat(data_frame, data_frame_columns, report_headers, respondents_categories)\nall_respondents_feature_endorse = respondents_feature_endorse['All Respondents']\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_multi_indexed_df(\n    data_frame=respondents_feature_endorse, ch_title='Most Important Feature When Endorsing Technology Purchase', worked_with_col='% of No Respondents',\n    height=600, width=1100,\n    plot_bgcolor=\"whitesmoke\", paper_bgcolor=\"whitesmoke\"\n)","metadata":{"panel-layout":{"height":1051.9886474609375,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Which programming, scripting, and markup languages have you done extensive development work in over the past year, and which do you want to work in over the next year? ","metadata":{"panel-layout":{"height":43.224430084228516,"visible":true,"width":100}}},{"cell_type":"code","source":"\ndata_frame = df\ndata_frame_columns = ['MainBranch', 'LanguageHaveWorkedWith', 'LanguageWantToWorkWith', 'LanguageAdmired']\n\nnew_columns_names = [\n    '% Language Worked With',\n    '% Language Want to Work With',\n    '% Language Admired'    \n]\n\nrespondents_categories = ['Professional Developer', 'Learning to Code', 'Other Coders', 'All Respondents']\n\nlanguages_combined_df = get_multi_index_perce_combined_category_dfs(data_frame, data_frame_columns, new_columns_names)\nlanguages_combined_df","metadata":{"panel-layout":{"height":1864.318115234375,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_multi_indexed_df(\n    data_frame=languages_combined_df, ch_title='Popular Programing & Scripting Languages', worked_with_col='% Language Worked With',\n    height=2000, width=1100,\n    plot_bgcolor=\"whitesmoke\", paper_bgcolor=\"whitesmoke\"\n)","metadata":{"panel-layout":{"height":2451.988525390625,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\ndef plot_dumbels_from_multi_index_df(data_frame, ch_title, height=1500, paper_bgcolor='mintcream', want_to=\"Want to Work With\", admired=\"Admired\"):\n    \n    groups = data_frame.columns.get_level_values(0).unique()\n    cols = data_frame.columns.get_level_values(1).unique()[1:]  \n    items = data_frame.index  \n    \n    fig = go.Figure()\n    \n    # Loop over each group and create scatter plots for each\n    for i, group in enumerate(groups):\n        data = dict(line_x=[], line_y=[], want_to_work_with=[], admired=[])\n        \n        # Loop over each item in the DataFrame\n        for item in items:\n            data['want_to_work_with'].append(data_frame.loc[item][group][cols[0]])\n            data['admired'].append(data_frame.loc[item][group][cols[1]])\n            data['line_x'].extend(\n                [\n                    data_frame.loc[item][group][cols[0]],\n                    data_frame.loc[item][group][cols[1]],\n                    None  # This ensures separation in line traces\n                ]\n            )\n            data['line_y'].extend([item, item, None])  # Ensures horizontal line per item\n        \n        # Add line trace\n        fig.add_trace(go.Scatter(\n            x=data['line_x'][::-1],\n            y=data['line_y'][::-1],\n            name=\"\",\n            mode='lines',\n            marker=dict(color='black', size=5),\n            visible=(i == 0),  # Make only the first group's traces visible initially\n            showlegend=False\n        ))\n    \n        # Add 'want_to_work_with' scatter\n        fig.add_trace(go.Scatter(\n            x=data['want_to_work_with'][::-1],\n            y=items[::-1],  # Use items instead of 'languages' for consistency\n            name=want_to,\n            mode='markers',\n            marker=dict(color='dodgerblue', size=12),\n            hovertemplate=('<i>item</i> : %{y}<br>'+'<i>Percentage</i> : %{x}%<extra></extra>'),\n            visible=(i == 0)  # Make only the first group's traces visible initially\n        ))\n    \n        # Add 'admired' scatter\n        fig.add_trace(go.Scatter(\n            x=data['admired'][::-1],\n            y=items[::-1],  # Same here, using items\n            name=admired,\n            mode='markers',\n            marker=dict(color='orange', size=12),\n            hovertemplate=('<i>item</i> : %{y}<br>'+'<i>Percentage</i> : %{x}%<extra></extra>'),\n            visible=(i == 0)  # Make only the first group's traces visible initially\n        ))\n    \n    # Create buttons for each group\n    buttons = []\n    num_traces_per_group = 3  # 3 traces (lines, want_to_work_with, admired) per group\n    for i, group in enumerate(groups):\n        visibility = [False] * len(groups) * num_traces_per_group\n        start_idx = i * num_traces_per_group\n        visibility[start_idx:start_idx + num_traces_per_group] = [True, True, True]\n        \n        button = dict(\n            method='update',\n            label=group,\n            args=[{'visible': visibility}]\n        )\n        buttons.append(button)\n    \n    # Add buttons to layout\n    fig.update_layout(\n        updatemenus=[\n            dict(\n                type='buttons',\n                buttons=buttons,\n                direction='right',\n                x=0.00,\n                xanchor='left',\n                y=0.9995,\n                yanchor='bottom',\n                pad=dict(r=20, t=10)\n            )\n        ]\n    )\n    \n    # Layout updates (legend, margins, background, etc.)\n    fig.update_layout(\n        margin=dict(t=70, b=5, r=20),\n        width=1100,\n        height=height,\n        legend=dict(\n            orientation=\"h\",  # Horizontal legend\n            x=0.1,            # Center the legend horizontally\n            y=0.950,           # Position the legend above the chart\n            xanchor='center',  # Anchor the legend from the center\n            yanchor='bottom'   # Anchor the y-position from the top\n        ),\n        paper_bgcolor=paper_bgcolor,\n        plot_bgcolor=paper_bgcolor,\n        xaxis=dict(showgrid=False, zeroline=False)\n    )\n\n    fig.update_layout(\n        yaxis=dict(\n            showgrid=True,           # Ensure that the grid is visible\n            gridcolor='white',    # Set the desired color for the horizontal grid lines\n            gridwidth=1,              # Set the width of the grid lines\n            griddash='dashdot'           # Make the grid lines dashed ('dash', 'dot', 'dashdot')\n        )\n    )\n\n    fig.update_layout(\n        title={\n            'text': ch_title,  # Title text\n            'y': 0.990,  # Vertical position\n            'x': 0.005,  # Horizontal position (centered)\n            'xanchor': 'left',  # X anchor position\n            'yanchor': 'top',  # Y anchor position\n            'font': {'size': 15, 'color': 'black', 'family': 'sans-serif', 'weight': 'bold'},  # Bold title\n        }\n        )\n    \n    # Show the figure\n    fig.show()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data_frame = languages_combined_df \nch_title= 'Language Want to Work with and Admired'\n\nplot_dumbels_from_multi_index_df(data_frame,ch_title,height=1400,paper_bgcolor='mintcream')","metadata":{"panel-layout":{"height":1851.988525390625,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"\n#### Which database environments have you done extensive development work in over the past year, and which do you want to work in over the next year?","metadata":{"panel-layout":{"height":43.224430084228516,"visible":true,"width":100}}},{"cell_type":"code","source":"\ndata_frame = df\t\ndata_frame_columns = ['MainBranch', 'DatabaseHaveWorkedWith', 'DatabaseWantToWorkWith', 'DatabaseAdmired']\n\nnew_columns_names = [\n    '% Database Worked With',\n    '% Database Want to Work With',\n    '% Database Admired'    \n]\n\nrespondents_categories = ['Professional Developer', 'Learning to Code', 'Other Coders', 'All Respondents']\n\ndatabases_combined_df = get_multi_index_perce_combined_category_dfs(data_frame, data_frame_columns, new_columns_names)\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"databases_combined_df","metadata":{"panel-layout":{"height":1492.8408203125,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_multi_indexed_df(\n    data_frame=databases_combined_df, ch_title= 'Popular Database Environments',\n    worked_with_col='% Database Worked With', height=1700, width=1100,\n    plot_bgcolor=\"whitesmoke\", paper_bgcolor=\"whitesmoke\"\n)","metadata":{"panel-layout":{"height":2151.988525390625,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data_frame = databases_combined_df \n\nplot_dumbels_from_multi_index_df(data_frame,ch_title='Databases Want to Work with vs Admired')","metadata":{"panel-layout":{"height":1951.988525390625,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Which cloud platforms have you done extensive development work in over the past year, and which do you want to work in over the next year? ","metadata":{"panel-layout":{"height":43.224430084228516,"visible":true,"width":100}}},{"cell_type":"code","source":"\ndata_frame = df\t\n\ndata_frame_columns = ['MainBranch', 'PlatformHaveWorkedWith', 'PlatformWantToWorkWith', 'PlatformAdmired']\n\nnew_columns_names = [\n    '% Platform Worked With',\n    '% Platform Want to Work With',\n    '% Platform Admired'    \n]\n\nrespondents_categories = ['Professional Developer', 'Learning to Code', 'Other Coders', 'All Respondents']\n\ncloud_platforms_combined_df = get_multi_index_perce_combined_category_dfs(data_frame, data_frame_columns, new_columns_names)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"cloud_platforms_combined_df","metadata":{"panel-layout":{"height":1280.568115234375,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_multi_indexed_df(\n    data_frame=cloud_platforms_combined_df, ch_title='Popular Cloud Platforms', worked_with_col='% Platform Worked With',\n    height=1500, width=1100,\n    plot_bgcolor=\"whitesmoke\", paper_bgcolor=\"whitesmoke\"\n)","metadata":{"panel-layout":{"height":1951.988525390625,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data_frame = cloud_platforms_combined_df \n\nplot_dumbels_from_multi_index_df(data_frame,ch_title='Cloud Platform Want to Work with vs Admired')","metadata":{"panel-layout":{"height":1951.988525390625,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Which web frameworks and web technologies have you done extensive development work in over the past year, and which do you want to work in over the next year?","metadata":{"panel-layout":{"height":43.224430084228516,"visible":true,"width":100}}},{"cell_type":"code","source":"\ndata_frame = df\t\n\ndata_frame_columns = ['MainBranch', 'WebframeHaveWorkedWith', 'WebframeWantToWorkWith', 'WebframeAdmired']\n\nnew_columns_names = [\n    '% Web_frameworks Worked With',\n    '% Web_frameworks Want to Work With',\n    '% Web_frameworks Admired'    \n]\n\nrespondents_categories = ['Professional Developer', 'Learning to Code', 'Other Coders', 'All Respondents']\n\nWeb_frameworks_combined_df = get_multi_index_perce_combined_category_dfs(data_frame, data_frame_columns, new_columns_names)\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"Web_frameworks_combined_df","metadata":{"panel-layout":{"height":1564.8294677734375,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_multi_indexed_df(\n    data_frame=Web_frameworks_combined_df, ch_title=\"Popular Web Frameworks and Web Technologies\",worked_with_col='% Web_frameworks Worked With',\n    height=1700, width=1100,\n    plot_bgcolor=\"whitesmoke\", paper_bgcolor=\"whitesmoke\"\n)","metadata":{"panel-layout":{"height":2151.988525390625,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data_frame = Web_frameworks_combined_df \n\nplot_dumbels_from_multi_index_df(data_frame,ch_title='Web Frameworks Want to Work with vs Admired')","metadata":{"panel-layout":{"height":1951.988525390625,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Which embedded systems and technologies have you done extensive development work in over the past year, and which do you want to work in over the next year?","metadata":{"panel-layout":{"height":43.224430084228516,"visible":true,"width":100}}},{"cell_type":"code","source":"\ndata_frame = df\t\n\ndata_frame_columns = ['MainBranch', 'EmbeddedHaveWorkedWith', 'EmbeddedWantToWorkWith', 'EmbeddedAdmired'\t]\n\nnew_columns_names = [\n    '% Embedded_Systems Worked With',\n    '% Embedded_Systems Want to Work With',\n    '% Embedded_Systems Admired'    \n]\n\nrespondents_categories = ['Professional Developer', 'Learning to Code', 'Other Coders', 'All Respondents']\n\nembeded_systems_combined_df = get_multi_index_perce_combined_category_dfs(data_frame, data_frame_columns, new_columns_names)\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"embeded_systems_combined_df","metadata":{"panel-layout":{"height":1111.193115234375,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_multi_indexed_df(\n    data_frame=embeded_systems_combined_df, ch_title=\"Popular Embeded Systems and Technologies\", worked_with_col='% Embedded_Systems Worked With',\n    height=1000, width=1100,\n    plot_bgcolor=\"whitesmoke\", paper_bgcolor=\"whitesmoke\"\n)","metadata":{"panel-layout":{"height":1451.988525390625,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data_frame = embeded_systems_combined_df \n\nplot_dumbels_from_multi_index_df(data_frame,ch_title='Embeded Systems and Technologies Want to Work with vs Admired', height=1100)","metadata":{"panel-layout":{"height":1551.988525390625,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Which other frameworks and libraries have you done extensive development work in over the past year, and which do you want to work in over the next year?","metadata":{"panel-layout":{"height":43.224430084228516,"visible":true,"width":100}}},{"cell_type":"code","source":"\ndata_frame = df\t\n\ndata_frame_columns = ['MainBranch', 'MiscTechHaveWorkedWith', 'MiscTechWantToWorkWith', 'MiscTechAdmired']\n\nnew_columns_names = [\n    '% other_frameworks_and_libraries Worked With',\n    '% other_frameworks_and_libraries Want to Work With',\n    '% other_frameworks_and_libraries Admired'    \n]\n\nrespondents_categories = ['Professional Developer', 'Learning to Code', 'Other Coders', 'All Respondents']\n\nother_frameworks_and_libraries_combined_df = get_multi_index_perce_combined_category_dfs(data_frame, data_frame_columns, new_columns_names)\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"other_frameworks_and_libraries_combined_df","metadata":{"panel-layout":{"height":1644.4317626953125,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_multi_indexed_df(\n    data_frame=other_frameworks_and_libraries_combined_df, worked_with_col='% other_frameworks_and_libraries Worked With',\n    ch_title=\"Popular Frameworks and Libraries\",\n    height=1600, width=1100,\n    plot_bgcolor=\"whitesmoke\", paper_bgcolor=\"whitesmoke\"\n)","metadata":{"panel-layout":{"height":2051.988525390625,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data_frame = other_frameworks_and_libraries_combined_df \n\nplot_dumbels_from_multi_index_df(data_frame,ch_title='Other Frameworks and Libraries Want to Work with vs Admired', height=1500)","metadata":{"panel-layout":{"height":1951.988525390625,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"\n#### Which developer tools for compiling, building and testing have you done extensive development work in over the past year, and which do you want to work in over the next year?","metadata":{"panel-layout":{"height":43.224430084228516,"visible":true,"width":100}}},{"cell_type":"code","source":"\ndata_frame = df\t\n\ndata_frame_columns = ['MainBranch', 'ToolsTechHaveWorkedWith', 'ToolsTechWantToWorkWith', 'ToolsTechAdmired']\n\nnew_columns_names = [\n    '% compiling_building_testing_tools Worked With',\n    '% compiling_building_testing_tools to Work With',\n    '% compiling_building_testing_tools Admired'    \n]\n\nrespondents_categories = ['Professional Developer', 'Learning to Code', 'Other Coders', 'All Respondents']\n\ncompiling_building_testing_tools_combined_df = get_multi_index_perce_combined_category_dfs(data_frame, data_frame_columns, new_columns_names)\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"compiling_building_testing_tools_combined_df","metadata":{"panel-layout":{"height":1526.3067626953125,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_multi_indexed_df(\n    data_frame=compiling_building_testing_tools_combined_df, worked_with_col='% compiling_building_testing_tools Worked With',\n    ch_title=\"Popular Compiling, Builiding and Testing Tools\",\n    height=1500, width=1100,\n    plot_bgcolor=\"whitesmoke\", paper_bgcolor=\"whitesmoke\"\n)","metadata":{"panel-layout":{"height":1951.988525390625,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data_frame = compiling_building_testing_tools_combined_df \n\nplot_dumbels_from_multi_index_df(data_frame,ch_title='Compiling, Building and Testing Tools Want to Work with vs Admired', height=1500)","metadata":{"panel-layout":{"height":1951.988525390625,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"\n#### Which development environments did you use regularly over the past year, and which do you want to work with over the next year?","metadata":{"panel-layout":{"height":43.224430084228516,"visible":true,"width":100}}},{"cell_type":"code","source":"\ndata_frame = df\t\n\ndata_frame_columns = ['MainBranch', 'NEWCollabToolsHaveWorkedWith', 'NEWCollabToolsWantToWorkWith', 'NEWCollabToolsAdmired']\n\nnew_columns_names = [\n    '% Dev_Environment Worked With',\n    '% Dev_Environment to Work With',\n    '% Dev_Environment Admired'    \n]\n\nrespondents_categories = ['Professional Developer', 'Learning to Code', 'Other Coders', 'All Respondents']\n\ndev_environment_combined_df = get_multi_index_perce_combined_category_dfs(data_frame, data_frame_columns, new_columns_names)\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"dev_environment_combined_df","metadata":{"panel-layout":{"height":1509.2044677734375,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_multi_indexed_df(\n    data_frame=dev_environment_combined_df, worked_with_col='% Dev_Environment Worked With',\n    ch_title=\"Popular Development Environments\",\n    height=1600, width=1100,\n    plot_bgcolor=\"whitesmoke\", paper_bgcolor=\"whitesmoke\"\n)","metadata":{"panel-layout":{"height":2051.988525390625,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data_frame = dev_environment_combined_df \n\nplot_dumbels_from_multi_index_df(data_frame,ch_title='Developer Environment Want to Work with vs Admired', height=1500)","metadata":{"panel-layout":{"height":1951.988525390625,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"####  What is the primary operating system in which you work?","metadata":{"panel-layout":{"height":43.224430084228516,"visible":true,"width":100}}},{"cell_type":"code","source":"\ndata_frame = df\t\n\ndata_frame_columns = ['MainBranch', 'OpSysPersonal use', 'OpSysProfessional use']\n\nnew_columns_names = [\n    '% OpSys Personal Use',\n    '% OpSysProfessional Use'   \n]\n\nrespondents_categories = ['Professional Developer', 'Learning to Code', 'Other Coders', 'All Respondents']\n\nopSys_combined_df = get_multi_index_perce_combined_category_dfs(data_frame, data_frame_columns, new_columns_names)\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"opSys_combined_df","metadata":{"panel-layout":{"height":1039.2044677734375,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Get the unique respondent categories (these should be level 0 if MultiIndex exists)\ngroups = opSys_combined_df.columns.get_level_values(0).unique()\nworked_with_cols = opSys_combined_df.columns.get_level_values(1).unique()\n\n# Create an empty figure\nfig = go.Figure()\n\nfor group in groups:\n    # Select data for the current group\n    df_group = opSys_combined_df[group][worked_with_cols]\n    \n    for i, col in enumerate(worked_with_cols):\n        # Add a trace for the horizontal bar chart\n        fig.add_trace(go.Bar(\n            x=df_group[col][::-1],  # Horizontal bar, so x is the data\n            y=df_group.index[::-1],  # y-axis is the languages\n            text=df_group[col][::-1],\n            texttemplate='%{text:.2f} %',\n            textposition='auto',\n            marker_color='dodgerblue' if i == 0 else 'orange',  # Different color for each column\n            marker=dict(cornerradius=2.5),\n            name=f'{col[2:]}',  # Label for each trace\n            orientation='h',  # Horizontal bar chart\n            visible=(group == groups[0]),  # Show only the first group initially\n            hovertemplate=(f'<i>Category</i>: {group}<br>'  # Show category (respondent group)\n                '<i>Percentage</i>: %{x:.1f}%<br>'  # Show the percentage\n                '<i>item</i>: %{y}'  # Show the language (y-axis)\n                          )\n        ))\n\n# Create buttons for toggling visibility between groups\nbuttons = []\nfor i, group in enumerate(groups):\n    # Make two traces visible for each group (if two metrics are added)\n    visibility = [False] * (2 * len(groups))\n    visibility[2 * i] = True  # Make the first trace for the group visible\n    visibility[2 * i + 1] = True  # Make the second trace for the group visible\n    \n    button = dict(\n        method=\"update\",\n        label=group,\n        args=[{\"visible\": visibility}],  # Show only the current group's traces\n    )\n    buttons.append(button)\n\n# Update the layout with individual buttons instead of a dropdown\nfig.update_layout(\n    updatemenus=[{\n        \"type\": \"buttons\",\n        \"buttons\": buttons,\n        \"direction\": \"right\",\n        \"x\": 0.0,\n        \"xanchor\": \"left\",\n        \"y\": 1.015,  # Position buttons above the chart\n        \"yanchor\": \"bottom\",\n        \"pad\": {\"r\": 10, \"t\": 10}  # Padding around the buttons\n    }],\n    xaxis=dict(showticklabels=False, showgrid=False, zeroline=True),\n    yaxis=dict(showticklabels=True, showgrid=False, zeroline=True),\n    width=1100,\n    height=1800,\n    margin=dict(t=100),  # Adjust the top margin to fit the buttons\n    plot_bgcolor=\"mintcream\",  # Set the plot background color\n    paper_bgcolor='mintcream'  # Set the chart background color\n)\n\n# Update the title\nfig.update_layout(\n    title={\n        'text': \"Popular Operating System Professional and Personal\",  # Title text\n        'y': 0.990,  # Vertical position\n        'x': 0.005,  # Horizontal position (centered)\n        'xanchor': 'left',  # X anchor position\n        'yanchor': 'top',  # Y anchor position\n        'font': {'size': 15, 'color': 'black', 'family': 'sans-serif', 'weight': 'bold'},  # Bold title\n    }\n)\n\nfig.update_layout(\n    barmode='group'\n)\n\nfig.update_layout(\n        legend=dict(\n            orientation=\"h\",  # Horizontal legend\n            x=0.45,            # Center the legend horizontally\n            y=-0.005,           # Position the legend below the chart\n            xanchor='center',  # Anchor the legend from the center\n            yanchor='top',      # Anchor the y-position from the top\n        ),\n    margin = dict(t=100, l=0, r=0, b=0)\n    \n)\n    \nfig.show()\n","metadata":{"panel-layout":{"height":2251.988525390625,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"\n#### Which collaborative work management and/or code documentation tools did you use regularly over the past year, and which do you want to work with over the next year?","metadata":{"panel-layout":{"height":43.224430084228516,"visible":true,"width":100}}},{"cell_type":"code","source":"\ndata_frame = df\t\n\ndata_frame_columns = ['MainBranch', 'OfficeStackAsyncHaveWorkedWith', 'OfficeStackAsyncWantToWorkWith', 'OfficeStackAsyncAdmired']\n\nnew_columns_names = [\n    '% Collab_Work_Mgt_Tool Worked With',\n    '% Collab_Work_Mgt_Tool Want to Worked With',\n    '% Collab_Work_Mgt_Tool Admired'\n]\n\nrespondents_categories = ['Professional Developer', 'Learning to Code', 'Other Coders', 'All Respondents']\n\ncollab_work_mgt_tool_combined_df = get_multi_index_perce_combined_category_dfs(data_frame, data_frame_columns, new_columns_names)\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":" collab_work_mgt_tool_combined_df","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_multi_indexed_df(\n    data_frame=collab_work_mgt_tool_combined_df, worked_with_col='% Collab_Work_Mgt_Tool Worked With',\n    ch_title=\"Popular Collaborative Workmanagement and/or Code Documentation Tools\",\n    height=1400, width=1100,\n    plot_bgcolor=\"whitesmoke\", paper_bgcolor=\"whitesmoke\"\n)","metadata":{"panel-layout":{"height":1851.988525390625,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data_frame = collab_work_mgt_tool_combined_df \n\nplot_dumbels_from_multi_index_df(\n    data_frame,ch_title='Collaborative/Work Management/Documentation Tools Want to Work with vs Admired',\n    height=1500\n)","metadata":{"panel-layout":{"height":1951.988525390625,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Which communication tools did you use regularly over the past year, and which do you want to work with over the next year?","metadata":{"panel-layout":{"height":43.224430084228516,"visible":true,"width":100}}},{"cell_type":"code","source":"\ndata_frame = df\t\n\ndata_frame_columns = ['MainBranch', 'OfficeStackSyncHaveWorkedWith', 'OfficeStackSyncWantToWorkWith', 'OfficeStackSyncAdmired']\n\nnew_columns_names = [\n    '% Communication_Tool Worked With',\n    '% Communication_Tool Want to Worked With',\n    '% Communication_Tool Admired'\n]\n\nrespondents_categories = ['Professional Developer', 'Learning to Code', 'Other Coders', 'All Respondents']\n\ncommunication_tool_combined_df = get_multi_index_perce_combined_category_dfs(data_frame, data_frame_columns, new_columns_names)\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"communication_tool_combined_df","metadata":{"panel-layout":{"height":1278.068115234375,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_multi_indexed_df(\n    data_frame=communication_tool_combined_df, ch_title=\"Popular Office Sychronisation Technologies\", worked_with_col='% Communication_Tool Worked With',\n    height=1500, width=1100,\n    plot_bgcolor=\"whitesmoke\", paper_bgcolor=\"whitesmoke\"\n)","metadata":{"panel-layout":{"height":1951.988525390625,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data_frame = communication_tool_combined_df \n\nplot_dumbels_from_multi_index_df(\n    data_frame,ch_title='Office Synchronisation Want to Work with vs Admired',\n    height=1500\n)","metadata":{"panel-layout":{"height":1951.988525390625,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## ","metadata":{"panel-layout":{"height":50.82386016845703,"visible":true,"width":100}}},{"cell_type":"markdown","source":"### Artificial Intelligence","metadata":{"panel-layout":{"height":44.07670211791992,"visible":true,"width":100}}},{"cell_type":"markdown","source":"#### Do you currently use AI tools in your development process?","metadata":{"panel-layout":{"height":43.224430084228516,"visible":true,"width":100}}},{"cell_type":"code","source":"\ndata_frame = df\ndata_frame_columns = ['MainBranch', 'AISelect']\nreport_headers = ['', 'No Respondents']\nrespondents_categories = ['Professional Developer', 'Learning to Code', 'Other Coders', 'All Respondents']\n\nai_select = get_multi_indexed_response_perce_cat(data_frame, data_frame_columns, report_headers, respondents_categories)\nai_select","metadata":{"panel-layout":{"height":597.5568237304688,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_multi_indexed_df(\n    ai_select, worked_with_col='% of No Respondents', ch_title=\"Artificial Intelligence Use\",\n    height=400, width=1100,\n    plot_bgcolor=\"floralwhite\", paper_bgcolor=\"floralwhite\", marker_color='yellowgreen'\n)","metadata":{"panel-layout":{"height":851.9885864257812,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### How favorable is your stance on using AI tools as part of your development workflow?","metadata":{"panel-layout":{"height":43.224430084228516,"visible":true,"width":100}}},{"cell_type":"code","source":"\ndata_frame = df\ndata_frame_columns = ['MainBranch', 'AISent']\nreport_headers = ['', 'No Respondents']\nrespondents_categories = ['Professional Developer', 'Learning to Code', 'Other Coders', 'All Respondents']\n\nai_sent = get_multi_indexed_response_perce_cat(data_frame, data_frame_columns, report_headers, respondents_categories)\nai_sent","metadata":{"panel-layout":{"height":677.1590576171875,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_multi_indexed_df(\n    ai_sent, worked_with_col='% of No Respondents', ch_title=\"Favourability of AI in Development Workflow\",\n    height=500, width=1100,\n    plot_bgcolor=\"floralwhite\", paper_bgcolor=\"floralwhite\", marker_color='yellowgreen'\n)","metadata":{"panel-layout":{"height":951.9885864257812,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### For the AI tools you use as part of your development workflow, what are the MOST important benefits you are hoping to achieve?","metadata":{"panel-layout":{"height":43.224430084228516,"visible":true,"width":100}}},{"cell_type":"code","source":"\ndata_frame = df\ndata_frame_columns = ['MainBranch', 'AIBen']\nreport_headers = ['', 'No Respondents']\nrespondents_categories = ['Professional Developer', 'Learning to Code', 'Other Coders', 'All Respondents']\n\nai_benefits = get_multi_indexed_response_perce_cat(data_frame, data_frame_columns, report_headers, respondents_categories)\nai_benefits\n","metadata":{"panel-layout":{"height":703.6931762695312,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_multi_indexed_df(\n    ai_benefits, worked_with_col='% of No Respondents', ch_title=\"AI Benefits in Development Workflow\",\n    height=500, width=1100,\n    plot_bgcolor=\"oldlace\", paper_bgcolor=\"oldlace\", marker_color='yellowgreen')","metadata":{"panel-layout":{"height":951.9885864257812,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### How much do you trust the accuracy of the output from AI tools as part of your development workflow?","metadata":{"panel-layout":{"height":43.224430084228516,"visible":true,"width":100}}},{"cell_type":"code","source":"\ndata_frame = df\ndata_frame_columns = ['MainBranch', 'AIAcc']\nreport_headers = ['', 'No Respondents']\nrespondents_categories = ['Professional Developer', 'Learning to Code', 'Other Coders', 'All Respondents']\n\nai_accuracy = get_multi_indexed_response_perce_cat(data_frame, data_frame_columns, report_headers, respondents_categories)\nai_accuracy\n","metadata":{"panel-layout":{"height":650.625,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_multi_indexed_df(\n    ai_accuracy, worked_with_col='% of No Respondents', ch_title=\"AI Tools Output Accuracy in Development Workflow\",\n    height=400, width=1100,\n    plot_bgcolor=\"oldlace\", paper_bgcolor=\"oldlace\", marker_color='yellowgreen')","metadata":{"panel-layout":{"height":851.9885864257812,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"\n##### AI Accuracy Response in Various Age Groups.","metadata":{"panel-layout":{"height":40.92329406738281,"visible":true,"width":100}}},{"cell_type":"code","source":"age_group_ai_accuracy = percentages_pivoted_by_column(data_frame=df, data_frame_columns=['AIAcc', 'Age'], grouping_columns=['Age','AIAcc']) \n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# sorting the age index\nindex_order = ['Under 18 years old','18-24 years old','25-34 years old','35-44 years old','45-54 years old','55-64 years old','65 years or older',\n               'Prefer not to say']\n\nage_group_ai_accuracy=sort_categorical_index(age_group_ai_accuracy, index_order)\nage_group_ai_accuracy","metadata":{"panel-layout":{"height":718.2385864257812,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"make_plotly_horizontal_stacked_bars_from_df(age_group_ai_accuracy, ch_title=\"Age Group and AI Accuracy \",\n                                         paper_bgcolor=\"mintcream\", plot_bgcolor=\"mintcream\",\n                                         width=1100, height=700)","metadata":{"panel-layout":{"height":1151.9886474609375,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### How well do the AI tools you use in your development workflow handle complex tasks?","metadata":{"panel-layout":{"height":43.224430084228516,"visible":true,"width":100}}},{"cell_type":"code","source":"\ndata_frame = df\ndata_frame_columns = ['MainBranch', 'AIComplex']\nreport_headers = ['', 'No Respondents']\nrespondents_categories = ['Professional Developer', 'Learning to Code', 'Other Coders', 'All Respondents']\n\nai_handling_complex_task = get_multi_indexed_response_perce_cat(data_frame, data_frame_columns, report_headers, respondents_categories)\nai_handling_complex_task","metadata":{"panel-layout":{"height":679.7158813476562,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_multi_indexed_df(\n    ai_handling_complex_task, worked_with_col='% of No Respondents', ch_title=\"AI Tools in Handling Complex Development Tasks\",\n    height=500, width=1100, plot_bgcolor=\"floralwhite\",\n    paper_bgcolor=\"floralwhite\", marker_color='yellowgreen')","metadata":{"panel-layout":{"height":951.9885864257812,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"ai_complex_issues_handling = df['AIComplex'].value_counts().to_frame()\nai_complex_issues_handling","metadata":{"panel-layout":{"height":638.6363525390625,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"labels = ai_complex_issues_handling.index\nvalues = ai_complex_issues_handling['count']\n\ndoughtnut_plot(labels, values, hole=0.5, pull_section=2, offset=0.1, ch_title='AI Complex Issues Handling', width=1100, height=700)","metadata":{"panel-layout":{"height":1151.9886474609375,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"\n#####  AI in handling complex tasks in development workflow in various industries.","metadata":{"panel-layout":{"height":40.92329406738281,"visible":true,"width":100}}},{"cell_type":"code","source":"\ncomplex_task_handling = percentages_pivoted_by_column(\n    data_frame=df, data_frame_columns=['Industry','AIComplex'],\n    grouping_columns=['Industry','AIComplex']\n) \ncomplex_task_handling","metadata":{"panel-layout":{"height":947.6135864257812,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data_frame = complex_task_handling\nch_title= 'Industry AI Complex Issues Handling'\n\nmake_plotly_horizontal_stacked_bars_from_df(data_frame, ch_title)","metadata":{"panel-layout":{"height":1151.9886474609375,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Which AI-powered search and developer tools did you use regularly over the past year, and which do you want to work with over the next year?","metadata":{"panel-layout":{"height":43.224430084228516,"visible":true,"width":100}}},{"cell_type":"code","source":"\ndata_frame = df\t\n\ndata_frame_columns = ['MainBranch', 'AISearchDevHaveWorkedWith', 'AISearchDevWantToWorkWith', 'AISearchDevAdmired']\n\nnew_columns_names = [\n    '% AI Search Worked With',\n    '% AI Search Want to Worked With',\n    '% AI Search Admired'\n]\n\nrespondents_categories = ['Professional Developer', 'Learning to Code', 'Other Coders', 'All Respondents']\n\nai_search_combined_result = get_multi_index_perce_combined_category_dfs(data_frame, data_frame_columns, new_columns_names)\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"ai_search_combined_result","metadata":{"panel-layout":{"height":1227.5,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_multi_indexed_df(\n    ai_search_combined_result, worked_with_col='% AI Search Worked With', ch_title=\"Popular AI Powered Search and Developer Tools\",\n    height=1200, width=1100,\n    plot_bgcolor=\"oldlace\", paper_bgcolor=\"oldlace\", marker_color='yellowgreen'\n)","metadata":{"panel-layout":{"height":1651.988525390625,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data_frame = ai_search_combined_result \n\nplot_dumbels_from_multi_index_df(data_frame,ch_title='AI Powered Search and Developer Tools Want to Work with vs Admired', paper_bgcolor='floralwhite', height=1000)","metadata":{"panel-layout":{"height":1451.988525390625,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Which parts of your development workflow are you currently using AI tools for and which are you interested in using AI tools for over the next year?","metadata":{"panel-layout":{"height":43.224430084228516,"visible":true,"width":100}}},{"cell_type":"code","source":"\ndata_frame = df\t\n\ndata_frame_columns = ['MainBranch','AIToolCurrently Using', 'AIToolInterested in Using', 'AIToolNot interested in Using']\n\nnew_columns_names = [\n    '% AI Tool Currently Using',\n    '% AI Tool Interested in Using',\n    '% AI Tool Not Interested in Using'\n]\n\nrespondents_categories = ['Professional Developer', 'Learning to Code', 'Other Coders', 'All Respondents']\n\nai_tools_comb_report = get_multi_index_perce_combined_category_dfs(data_frame, data_frame_columns, new_columns_names)\n\nai_tools_comb_report","metadata":{"panel-layout":{"height":998.92041015625,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\ndef two_tier_buttonns_hbar_multi_indexed_df(data_frame, ch_title, height=800, paper_bgcolor='floralwhite',btn_slice_index=9):\n\n    groups = data_frame.columns.get_level_values(0).unique()\n    cols = data_frame.columns.get_level_values(1).unique()\n    \n    fig = go.Figure()\n    \n    # Add traces for each group and column\n    for group in groups:\n        for col in cols:\n            fig.add_trace(\n                go.Bar(\n                    x=data_frame[group][col][::-1],\n                    y=data_frame.index[::-1],\n                    orientation='h',\n                    text=data_frame[group][col][::-1],\n                    texttemplate='%{text:.2f}%',\n                    textposition='auto',\n                    hovertemplate=(\n                        f\"<i>Category</i>: {group}<br>\" +\n                        f\"<i>Status</i>: {col[btn_slice_index:]}<br>\" +\n                        \"<i>AI Tool</i>: %{y}<br>\" +\n                        \"<i>Percentage</i>: %{x:.2f}%<extra></extra>\"\n                    ),\n                    name=f'{group} - {col[btn_slice_index:]}',\n                    marker=dict(color='dodgerblue',cornerradius=2.5),\n                    visible=False  # Initially hide all traces\n                )\n            )\n    \n    # Initially, show only the first group and column\n    fig.data[0].visible = True\n    \n    # Track the selected group and column\n    selected_group = groups[0]\n    selected_col = cols[0][btn_slice_index:]\n    \n    # Function to update visibility based on the selected group and column\n    def update_visibility(selected_group, selected_col):\n        visibility = []\n        for trace in fig.data:\n            trace_group, trace_col = trace.name.split(' - ')\n            visibility.append(trace_group == selected_group and trace_col == selected_col)\n        return visibility\n    \n    # Create buttons for the top tier (groups)\n    group_buttons = []\n    for group in groups:\n        group_buttons.append(dict(\n            label=group,\n            method=\"update\",\n            args=[{\"visible\": update_visibility(group, selected_col)},]  # Update visibility based on group and selected column\n        ))\n    \n    # Create buttons for the bottom tier (cols)\n    col_buttons = []\n    for col in cols:\n        col_buttons.append(dict(\n            label=col[btn_slice_index:],  # Adjust the label to match the naming scheme\n            method=\"update\",\n            args=[{\"visible\": update_visibility(selected_group, col[btn_slice_index:])},]  # Update visibility based on selected group and column\n        ))\n    \n    # Add the two tiers of buttons\n    fig.update_layout(\n        updatemenus=[\n            dict(\n                buttons=group_buttons,\n                direction=\"right\",\n                pad={\"r\": 10, \"t\": 10},\n                showactive=True,\n                type='buttons',\n                x=0.0,  # Adjust the x position if needed\n                xanchor=\"left\",\n                y=1.09,  # Adjust the y position if needed\n                yanchor=\"bottom\"\n            ),\n            dict(\n                buttons=col_buttons,\n                direction=\"right\",\n                pad={\"r\": 10, \"t\": 10},\n                showactive=True,\n                type='buttons',\n                x=0.0,  # Adjust the x position if needed\n                xanchor=\"left\",\n                y=1.005,  # Adjust the y position if needed\n                yanchor=\"bottom\"\n            )\n        ],\n        margin=dict(t=150, b=10, l=0,r=0),\n        height=800,\n        width=1100,\n        plot_bgcolor=paper_bgcolor,\n        paper_bgcolor=paper_bgcolor\n    )\n    # Update the title\n    fig.update_layout(\n        title={\n            'text':ch_title,  # Title text\n            'y': 0.990,  # Vertical position\n            'x': 0.005,  # Horizontal position (centered)\n            'xanchor': 'left',  # X anchor position\n            'yanchor': 'top',  # Y anchor position\n            'font': {'size': 15, 'color': 'black', 'family': 'sans-serif', 'weight': 'bold'},  # Bold title\n        }\n    )\n    \n    fig.show()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_multi_indexed_df(\n    ai_tools_comb_report, worked_with_col='% AI Tool Currently Using', ch_title=\"Top Development Workflows Where AI is Currently Used\",\n    height=800, width=1100,\n    plot_bgcolor=\"oldlace\", paper_bgcolor=\"oldlace\", marker_color='yellowgreen'\n)","metadata":{"panel-layout":{"height":1251.9886474609375,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data_frame=ai_tools_comb_report\nch_title=\"Developer Interest in Using AI Across Top Workflows\"\n\nplot_dumbels_from_multi_index_df(data_frame, ch_title, height=600, paper_bgcolor='floralwhite', want_to=\"Interested in Using\", admired=\"Not Interested in Using\")","metadata":{"panel-layout":{"height":1051.9886474609375,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Do you believe AI is a threat to your current job?","metadata":{"panel-layout":{"height":43.224430084228516,"visible":true,"width":100}}},{"cell_type":"code","source":"\ndata_frame = df\ndata_frame_columns = ['MainBranch', 'AIThreat']\nreport_headers = ['', 'No Respondents']\nrespondents_categories = ['Professional Developer', 'Learning to Code', 'Other Coders', 'All Respondents']\n\nai_threat = get_multi_indexed_response_perce_cat(data_frame, data_frame_columns, report_headers, respondents_categories)\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_multi_indexed_df(\n    ai_threat, worked_with_col='% of No Respondents', ch_title=\"AI Threat to current Job\",\n    height=400, width=1100,\n    plot_bgcolor=\"oldlace\", paper_bgcolor=\"oldlace\", marker_color='yellowgreen')","metadata":{"panel-layout":{"height":851.9885864257812,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"ai_job_threat = df['AIThreat'].dropna().value_counts().to_frame()\nai_job_threat","metadata":{"panel-layout":{"height":585.5681762695312,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"labels = ai_job_threat.index\nvalues = ai_job_threat['count']\n\ndoughtnut_plot(labels, values, hole=0.6, pull_section=2, offset=0, ch_title='AI Current Job Threat', width=1100, height=700)","metadata":{"panel-layout":{"height":1151.9886474609375,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##### AI Threat Response in Various Industries","metadata":{"panel-layout":{"height":40.92329406738281,"visible":true,"width":100}}},{"cell_type":"code","source":"AI_threat_per_industry = percentages_pivoted_by_column(\n    data_frame=df, data_frame_columns=['Industry', 'AIThreat'],\n    grouping_columns=['Industry', 'AIThreat']\n) \nAI_threat_per_industry","metadata":{"panel-layout":{"height":903.9772338867188,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data_frame = AI_threat_per_industry[::-1]\nch_title= 'Industry vs AI Threat to Current Jobs'\n\nmake_plotly_horizontal_stacked_bars_from_df(data_frame, ch_title)","metadata":{"panel-layout":{"height":1151.9886474609375,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##### AI Threat and Age","metadata":{"panel-layout":{"height":40.92329406738281,"visible":true,"width":100}}},{"cell_type":"code","source":"AI_threat_per_age_group = percentages_pivoted_by_column(\n    data_frame=df, data_frame_columns=['Age', 'AIThreat'],\n    grouping_columns=['Age', 'AIThreat']\n) \n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# sorting the age index\nindex_order = ['Under 18 years old','18-24 years old','25-34 years old','35-44 years old','45-54 years old','55-64 years old','65 years or older',\n               'Prefer not to say']\n\nAI_threat_per_age_group = sort_categorical_index(AI_threat_per_age_group, index_order)\nAI_threat_per_age_group","metadata":{"panel-layout":{"height":718.2385864257812,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data_frame = AI_threat_per_age_group[::-1]\nch_title= 'Age Group vs AI Threat to Current Job'\n\nmake_plotly_horizontal_stacked_bars_from_df(data_frame, ch_title)","metadata":{"panel-layout":{"height":1151.9886474609375,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Which AI ethical responsibilities are most important to you?","metadata":{"panel-layout":{"height":43.224430084228516,"visible":true,"width":100}}},{"cell_type":"code","source":"\ndata_frame = df\ndata_frame_columns = ['MainBranch', 'AIEthics']\nreport_headers = ['', 'No Respondents']\nrespondents_categories = ['Professional Developer', 'Learning to Code', 'Other Coders', 'All Respondents']\n\nall_responses_on_ethics =  get_multi_indexed_response_perce_cat(data_frame, data_frame_columns, report_headers, respondents_categories)\nall_responses_on_ethics","metadata":{"panel-layout":{"height":732.7840576171875,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_multi_indexed_df(\n    all_responses_on_ethics, worked_with_col='% of No Respondents', ch_title=\"AI Ethical Responsibilities\",\n    height=600, width=1100,\n    plot_bgcolor=\"oldlace\", paper_bgcolor=\"oldlace\", marker_color='yellowgreen'\n)","metadata":{"panel-layout":{"height":1051.9886474609375,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### What are the challenges to your company/whole team using AI code assistants or GenAI tools?","metadata":{"panel-layout":{"height":43.224430084228516,"visible":true,"width":100}}},{"cell_type":"code","source":"\ndata_frame = df\ndata_frame_columns = ['MainBranch', 'AIChallenges']\nreport_headers = ['', 'No Respondents']\nrespondents_categories = ['Professional Developer', 'Learning to Code', 'Other Coders', 'All Respondents']\n\nall_responses_on_challenges =  get_multi_indexed_response_perce_cat(data_frame, data_frame_columns, report_headers, respondents_categories)\nall_responses_on_challenges","metadata":{"panel-layout":{"height":773.8635864257812,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_multi_indexed_df(\n    all_responses_on_challenges, worked_with_col='% of No Respondents', ch_title=\"Challenges Using AI Code Assistants or GenAI Tools\",\n    height=600, width=1100,\n    plot_bgcolor=\"oldlace\", paper_bgcolor=\"oldlace\", marker_color='yellowgreen'\n)","metadata":{"panel-layout":{"height":1051.9886474609375,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Organisation size and the current developers' work station","metadata":{"panel-layout":{"height":44.07670211791992,"visible":true,"width":100}}},{"cell_type":"code","source":"org_size_order = [\n    'Just me - I am a freelancer, sole proprietor, etc.',\n    '2 to 9 employees',\n    '10 to 19 employees',\n    '20 to 99 employees',\n    '100 to 499 employees',\n    '500 to 999 employees',\n    '1,000 to 4,999 employees',\n    '5,000 to 9,999 employees',\n    '10,000 or more employees',\n    'I don’t know'\n]\n    ","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\ndata_frame = df\ndata_frame_columns = ['MainBranch', 'OrgSize']\nreport_headers=[' ', 'No Respondents']\n\nrespondents_org_size = get_response_count_with_percentages(data_frame, data_frame_columns, report_headers, category_filter='All Respondents').head(10)\n\nall_respondents_org_size = sort_categorical_index(respondents_org_size, org_size_order)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"x_values = all_respondents_org_size.index[::-1]\ny_values = all_respondents_org_size['% of No Respondents'].iloc[::-1]\n# bar_color='dodgerblue'\n\ncreate_custom_barh(x_values, y_values, ch_title=\"Respondents Organization Sizes\", figsize=(8,4), face_color='mintcream', bar_color='limegreen')","metadata":{"panel-layout":{"height":585.9943237304688,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"organisation_size_workstation = percentages_pivoted_by_column(\n    data_frame=df, data_frame_columns=['OrgSize','RemoteWork'], grouping_columns=['OrgSize','RemoteWork']\n) \n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"organisation_size_workstation = organisation_size_workstation=sort_categorical_index(organisation_size_workstation, org_size_order)\norganisation_size_workstation","metadata":{"panel-layout":{"height":915.3124389648438,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data_frame = organisation_size_workstation[::-1]\nch_title= 'OrgSize and Workstation Type'\n\nmake_plotly_horizontal_stacked_bars_from_df(data_frame, ch_title)","metadata":{"panel-layout":{"height":1295.9942626953125,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Compensation Related Analysis","metadata":{"panel-layout":{"height":44.07670211791992,"visible":true,"width":100}}},{"cell_type":"code","source":"fig = go.Figure(data=go.Violin(x=df['ConvertedCompYearly'], box_visible=False, line_color='black', meanline_visible=False,\n                               fillcolor='limegreen', opacity=0.5, orientation='h', y0=\"<b>Annual Compensation<br>(USD)</b>\", width=1100 ))\n\nfig.update_layout(xaxis_zeroline=False, plot_bgcolor=\"whitesmoke\", paper_bgcolor=\"whitesmoke\",\n                 title={\n        'text': 'Annual Compensation (USD) Distribution',  # Title text underlined\n        'y': 0.990,  # Vertical position\n        'x': 0.005,  # Horizontal position (centered)\n        'xanchor': 'left',  # X anchor position\n        'yanchor': 'top',  # Y anchor position\n        'font': {'size': 15, 'color': 'black', 'family': 'sans-serif', 'weight': 'bold'},  # Bold title\n    })\n\nfig.show()","metadata":{"panel-layout":{"height":1045.9942626953125,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##### Details of Outliers.","metadata":{"panel-layout":{"height":40.92329406738281,"visible":true,"width":100}}},{"cell_type":"code","source":"'''\nGetting the Developer who earned more than a million dollars per year.\nTheir education level, years of coding as a pro, workstation,country, developer type and their industry.\n'''\n\ndf.loc[\ndf['ConvertedCompYearly'] >1000000,\n['EdLevel','YearsCodePro','RemoteWork','Country', 'DevType','Industry', 'ConvertedCompYearly']\n].sort_values(\n    by='ConvertedCompYearly', ascending=False\n).reset_index(drop=True)\n","metadata":{"panel-layout":{"height":2060.426025390625,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##### Outliers Trimmed","metadata":{"panel-layout":{"height":40.92329406738281,"visible":true,"width":100}}},{"cell_type":"code","source":"compensation_without_outliers_df = df.loc[df['ConvertedCompYearly'] <1000000, 'ConvertedCompYearly'].dropna().to_frame().reset_index(drop=True)\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"fig = go.Figure(data=go.Violin(x=compensation_without_outliers_df['ConvertedCompYearly'], box_visible=True, line_color='black', meanline_visible=False,\n                               fillcolor='limegreen', opacity=0.5, orientation='h', y0=\"<b>Annual Compensation<br>(USD)</b>\", width=1100 ))\n\nfig.update_layout(xaxis_zeroline=False, plot_bgcolor=\"whitesmoke\", paper_bgcolor=\"whitesmoke\",\n                 title={\n        'text': 'Annual Compensation < 1M (USD) Distribution',  # Title text underlined\n        'y': 0.990,  # Vertical position\n        'x': 0.005,  # Horizontal position (centered)\n        'xanchor': 'left',  # X anchor position\n        'yanchor': 'top',  # Y anchor position\n        'font': {'size': 15, 'color': 'black', 'family': 'sans-serif', 'weight': 'bold'},  # Bold title\n    })\nfig.show()","metadata":{"panel-layout":{"height":1045.9942626953125,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\ndef get_all_cats_grouped_median_df(data_frame, data_frame_columns, report_headers, respondents_categories):\n    \n    made_data_frame = make_data_frame(data_frame_columns, data_frame,)\n    cleaned_data = clean_data(made_data_frame)\n    \n    cat_filtered_data_dfs = [get_category_of_interest(cleaned_data, category)\n                              for category in respondents_categories]\n    \n    grouped_agg_mean_series = [(cat_filtered_data_df.groupby(cat_filtered_data_df.columns[1])[cat_filtered_data_df.columns[2]].median())\n                               for cat_filtered_data_df in cat_filtered_data_dfs]\n    \n    grouped_data_dfs = [pd.DataFrame(grouped_data_item) for grouped_data_item in grouped_agg_mean_series]\n    \n    for df_item in grouped_data_dfs:\n        df_item.index.name = report_headers[0]\n    \n    for df_item in grouped_data_dfs:\n        df_item.columns = [report_headers[i] for i in range(1, len(report_headers))]\n    \n    return grouped_data_dfs\n    ","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##### Highest Education Level and Median Annual Compensation","metadata":{"panel-layout":{"height":40.92329406738281,"visible":true,"width":100}}},{"cell_type":"code","source":"data_frame = df\ndata_frame_columns = ['MainBranch','EdLevel', 'ConvertedCompYearly']\nreport_headers = ['Highest Education Level','Median Annual Compensation']\nrespondents_categories = ['All Respondents','Professional Developer', 'Learning to Code', 'Other Coders']\n\nAll_cats = get_all_cats_grouped_median_df(data_frame, data_frame_columns, report_headers, respondents_categories)\nAll_cats[0].style.format('{:.1f}').bar(cmap='tab20c')","metadata":{"panel-layout":{"height":876.7897338867188,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##### Proffessional Experince and Median Annual Compensation.","metadata":{"panel-layout":{"height":40.92329406738281,"visible":true,"width":100}}},{"cell_type":"code","source":"data_frame = df\ndata_frame_columns = ['MainBranch','YearsCodePro', 'ConvertedCompYearly']\nreport_headers = ['Years Coding Proffessionally','Median Annual Compensation']\nrespondents_categories = ['All Respondents','Professional Developer', 'Learning to Code', 'Other Coders']\nindex_order = ['Less than 1 year']+[str(i) for i in range(1,51)]+['More than 50 years']\n\nyear_and_median_comp = get_all_cats_grouped_median_df(data_frame, data_frame_columns, report_headers, respondents_categories)\nall_repsp_exp_comp = year_and_median_comp[0]\ncoding_experience_vs_median_salary_df = sort_categorical_index(all_repsp_exp_comp, index_order)\ncoding_experience_vs_median_salary_df.head(5)\n","metadata":{"panel-layout":{"height":782.6420288085938,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"x=coding_experience_vs_median_salary_df.index\ny=coding_experience_vs_median_salary_df['Median Annual Compensation']\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(\n    x=x,\n    y=y,\n    line=dict(color='orange'),\n    name=\"\",\n    hovertemplate=(\n        \"<i>Median Compensation(USD)</i>: %{y:,.1f}<br>\" +\n        \"<i>Pro Experience(yrs)</i>: %{x}<extra></extra>\")\n))\n\nfig.update_layout(\n    paper_bgcolor=\"whitesmoke\",plot_bgcolor='snow', \n    width=1100, height=600,\n    margin=dict(t=75,b=50),\n    xaxis=dict(showgrid=False, zeroline=False)\n)\n\nticktext=list(range(51))+['50+']\n\nfig.update_xaxes(\n    title=dict(\n        text='Pro Coding Experience(Yrs)',\n        font=dict(size=12, family=\"sans-serif\",color=\"black\", weight=\"bold\")\n    ),\n    tickvals=x,\n    tickangle=0,\n    ticktext=ticktext[:len(x)]\n)\n\nfig.update_layout(\n    yaxis=dict(\n        showgrid=True,           # Ensure that the grid is visible\n        gridcolor='lightgray',    # Set the desired color for the horizontal grid lines\n        gridwidth=1,              # Set the width of the grid lines\n        griddash='dashdot'           # Make the grid lines dashed ('dash', 'dot', 'dashdot')\n    )\n)\n\nfig.update_layout(\n    title=dict(\n        text=\"Annual Median Compensation Vs Professional Experience\",  # Title text \n        y=0.950,  # Vertical position\n        x=0.50,  # Horizontal position (centered)\n        xanchor='center',  # X anchor position\n        yanchor='top',  # Y anchor position\n        font={'size': 15, 'color': 'black', 'family': 'sans-serif', 'weight': 'bold'},  # Bold title\n    )\n)\n\nfig.show()\n","metadata":{"panel-layout":{"height":1195.9942626953125,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##### Programming, Scripting and Markup Language Worked with against Median Annual Compensation","metadata":{"panel-layout":{"height":40.92329406738281,"visible":true,"width":100}}},{"cell_type":"code","source":"# Get a array of languages worked with.\nunique_lang_df = get_unique_column_items(data_frame=df, column_name='LanguageHaveWorkedWith', sep=';')\n","metadata":{"scrolled":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Get language worked with annual median compensation data frame.\n\ndata_frame = df\nanalysis_columns = ['MainBranch','LanguageHaveWorkedWith','ConvertedCompYearly']\nreport_col = ['Technology', 'Median Annual Salary']\ntech_list = unique_lang_df\n\nlang_median_sal_df = median_yr_sal_per_tech(data_frame, analysis_columns, report_col, tech_list)","metadata":{"scrolled":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Plot database worked with and median annual compensation horizontal bar chart\n\nx_values = lang_median_sal_df.index\ny_values = lang_median_sal_df['Median Annual Salary']\nch_title = 'Language Worked With Vs Median Annual Compensation'\n# figsize = (7,5)\n\ncreate_custom_barh(x_values, y_values, ch_title, figsize=(8,14), lab_txt_pre='$')","metadata":{"panel-layout":{"height":2025.9942626953125,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##### Databases Worked with against Median Annual Compensation","metadata":{"panel-layout":{"height":40.92329406738281,"visible":true,"width":100}}},{"cell_type":"code","source":"# Get a list of databases worked with.\nunique_db_df = get_unique_column_items(data_frame=df, column_name='DatabaseHaveWorkedWith', sep=';')\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Get database worked with median annual compensation dataframe.\n\ndata_frame = df\nanalysis_columns = ['MainBranch','DatabaseHaveWorkedWith','ConvertedCompYearly']\nreport_col = ['Technology', 'Median Annual Salary']\ntech_list = unique_db_df\n\ndb_median_annual_comp_df = median_yr_sal_per_tech(data_frame, analysis_columns, report_col, tech_list)","metadata":{"scrolled":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Plot database worked with and median annual compensation horizontal bar chart\n\nx_values = db_median_annual_comp_df.index\ny_values = db_median_annual_comp_df['Median Annual Salary']\nch_title = 'Database Worked With Vs Median Annual Compensation'\n# figsize = (7,5)\n\ncreate_custom_barh(x_values, y_values, ch_title, figsize=(7,10), lab_txt_pre='$')\n","metadata":{"panel-layout":{"height":1450,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##### Cloud Platform Worked with Against Median Compesation","metadata":{"panel-layout":{"height":40.92329406738281,"visible":true,"width":100}}},{"cell_type":"code","source":"# Get a unique array list of cloud platforms worked with.\nunique_cl_df = get_unique_column_items(data_frame=df, column_name='PlatformHaveWorkedWith', sep=';')\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Get Cloudplatform worked with and median salary data frame.\n\ndata_frame = df\nanalysis_columns = ['MainBranch','PlatformHaveWorkedWith','ConvertedCompYearly']\nreport_col = ['Technology', 'Median Annual Salary']\ntech_list = unique_cl_df\n\ncloud_platform_sal_df = median_yr_sal_per_tech(data_frame, analysis_columns, report_col, tech_list)","metadata":{"scrolled":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Plot cloud platform worked with and median annual compensation horizontal bar chart.\n\nx_values = cloud_platform_sal_df.index\ny_values = cloud_platform_sal_df['Median Annual Salary']\nch_title = 'Cloud Platform Worked With Vs Median Annual Compensation'\n# figsize = (7,5)\n\ncreate_custom_barh(x_values, y_values, ch_title, figsize=(8,9), lab_txt_pre='$')\n","metadata":{"panel-layout":{"height":1305.9942626953125,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##### Developer against Median Annual Compensation","metadata":{"panel-layout":{"height":40.92329406738281,"visible":true,"width":100}}},{"cell_type":"code","source":"# Get Unique industries array.\nunique_ind_df = get_unique_column_items(data_frame=df, column_name='Industry', sep=';')\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Get Industry median annual compensation data frame.\ndata_frame = df\nanalysis_columns = ['MainBranch','Industry','ConvertedCompYearly']\nreport_col = ['Industry', 'Median Annual Salary']\ntech_list = unique_ind_df\n\nindustry_median_sal = median_yr_sal_per_tech(data_frame, analysis_columns, report_col, tech_list)\n","metadata":{"scrolled":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"x_values = industry_median_sal.index\ny_values = industry_median_sal['Median Annual Salary']\nch_title = 'Industry Vs Median Annual Compensation'\n# figsize = (7,5)\n\ncreate_custom_barh(x_values, y_values, ch_title, figsize=(8,6), lab_txt_pre='$')","metadata":{"panel-layout":{"height":873.991455078125,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##### Developer Type against Median Annual Compensation","metadata":{"panel-layout":{"height":40.92329406738281,"visible":true,"width":100}}},{"cell_type":"code","source":"# Get Developer type unique array.\nunique_dev_type_df = get_unique_column_items(data_frame=df, column_name='DevType', sep=';')\n","metadata":{"scrolled":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Get Developer type Annual median compensation data frame.\n\ndata_frame = df\nanalysis_columns = ['MainBranch','DevType','ConvertedCompYearly']\nreport_col = ['Developer Type', 'Median Annual Salary']\ntech_list = unique_dev_type_df\n\ndevtype_median_sal = median_yr_sal_per_tech(data_frame, analysis_columns, report_col, tech_list)\n","metadata":{"scrolled":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Plot Developer type median annual compensation horizontal bar chart.\n\nx_values = devtype_median_sal.index\ny_values = devtype_median_sal['Median Annual Salary']\nch_title = 'Developer Type Vs Median Annual Compensation'\n# figsize = (7,5)\n\ncreate_custom_barh(x_values, y_values, ch_title, figsize=(8,10), lab_txt_pre='$')","metadata":{"panel-layout":{"height":1450,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##### Age against Median Annual Compensation","metadata":{"panel-layout":{"height":40.92329406738281,"visible":true,"width":100}}},{"cell_type":"code","source":"# Get the age groups.\nunique_age_df = get_unique_column_items(data_frame=df, column_name='Age', sep=';')\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Get age group median annual compensation df.\n\ndata_frame = df\nanalysis_columns = ['MainBranch','Age','ConvertedCompYearly']\nreport_col = ['Age', 'Median Annual Salary']\ntech_list = unique_age_df\n\nage_median_salary_df = median_yr_sal_per_tech(data_frame, analysis_columns, report_col, tech_list)\n\nindex_order = ['Under 18 years old','18-24 years old','25-34 years old','35-44 years old','45-54 years old','55-64 years old','65 years or older',\n               'Prefer not to say']\n\nage_sal = sort_categorical_index(age_median_salary_df, index_order)\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# plot Age Median Annual Compensation horizontal bar chart.\n\nx_values = age_sal.index\ny_values = age_sal[age_sal.columns[0]]\nch_title = 'Age vs Median Annual Compensation'\nlab_txt_pre = '$'\nfigsize = (8, 4)\n\ncreate_custom_barh(x_values, y_values, ch_title, lab_txt_pre, figsize)","metadata":{"panel-layout":{"height":585.9943237304688,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##### Median Annual Compensation against Work Experience (All Devs, Python, Java, and C++ Developers)","metadata":{"panel-layout":{"height":40.92329406738281,"visible":true,"width":100}}},{"cell_type":"code","source":"dev_techs = ['All_Devs', 'Python', 'Java', 'C++']","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\nbin_size = 5\nmax_val = max(cleaned_pro_years_code['YearsCodePro'])+bin_size\n\nlabels = [\"{0} - {1} Years\".format(i, i + bin_size - 1) for i in range(0, max_val - bin_size, bin_size)]\nlabels.append(f\"{max_val-bin_size}+ Years\")\n\ndata_frame = df\ndata_frame_columns = ['LanguageHaveWorkedWith', 'ConvertedCompYearly', 'WorkExp']\n\ndata = make_data_frame(data_frame_columns, data_frame)\ncleaned_data = clean_data(data)\n\nAll_techs_and_median_sal = []\nfor dev_tech in dev_techs:\n    if dev_tech == 'All_Devs':\n        filtered_data = cleaned_data\n\n    else:\n        filtered_data = cleaned_data.loc[cleaned_data[cleaned_data.columns[0]].str.contains(dev_tech, regex=False)]\n\n    with_gr_col = filtered_data.assign(\n        Wrk_Exp_Groups = pd.cut(filtered_data['WorkExp'], bins=list(range(0, max_val, bin_size)) + [max_val], labels=labels, include_lowest=True, right=False)\n        )\n    groupped_df = with_gr_col.groupby('Wrk_Exp_Groups', observed=False)[data_frame_columns[1]].median()\n    \n    All_techs_and_median_sal.append(groupped_df.to_frame(name='Median Annual Salary'))      \n           ","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"all_devs_comp = All_techs_and_median_sal[0]","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"python_comp = All_techs_and_median_sal[1]","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"java_comp = All_techs_and_median_sal[2]","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"c_plus_plus_comp = All_techs_and_median_sal[3]","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"experience = all_devs_comp.index","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Create figure and plot style\nplt.style.use('seaborn-v0_8-bright')\nplt.figure(figsize=(10,6), dpi=150, facecolor='whitesmoke')\n\n# Plot the line graphs.\nplt.plot(experience,all_devs_comp, color='dimgray', linestyle='--', marker='o', label='All Devs')\nplt.plot(experience,python_comp, color='blue', linestyle='-', marker='o', label='Python')\nplt.plot(experience,java_comp, color='lime', linestyle='-.', marker='o', label='Java')\nplt.plot(experience,c_plus_plus_comp, color='orange', linestyle='-', marker='x', label='C_Plus_Plus')\n\n# Remove borders.\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\n\n# Set the bottom border color to lightgrey.\nplt.gca().spines['bottom'].set_color('lightgrey')\n\n# Grey axes ticks.\nplt.gca().tick_params(axis='x', colors='lightgrey')  # Change x-axis tick color\nplt.gca().tick_params(axis='y', which='both', left=False, right=False)\n\n# Set title(underlined) and axes ticks.\nplt.title('Median Annual Salary(USD)  Vs  Work Experience', weight='bold', pad=8, color='black')\n# plt.text(0.5, 1.05, 'Median Annual Salary (USD) Vs Work Experience', ha='center', va='center', fontsize=14, weight='bold', underline=True)\nplt.yticks(fontsize=7, color='black')\nplt.xticks(rotation=45, fontsize=7, color='black')\n\n# Set legend location.\nplt.legend(loc='lower right',frameon=False, labelcolor='black', fontsize=8)\n\nplt.gca().set_facecolor('whitesmoke')\n\n# Set grid style.\nplt.grid(axis='y',linestyle='--')\n\n# Ensure layout is adjusted properly.\nplt.tight_layout()\n","metadata":{"panel-layout":{"height":873.991455078125,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Analysis based on countries","metadata":{"panel-layout":{"height":44.07670211791992,"visible":true,"width":100}}},{"cell_type":"code","source":"# top_10_countries\n\ndata_frame = df\ndata_frame_columns = ['MainBranch', 'Country']\nreport_headers=[' ', 'No Respondents']\n\ntop_10_countries = get_response_count_with_percentages(data_frame, data_frame_columns, report_headers, category_filter='All Respondents').head(10)\ntop_10_countries.style.format(\"{:.2f}\").bar(subset='% of No Respondents', cmap='tab20c')","metadata":{"panel-layout":{"height":1217.8551025390625,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Median Annual Compensation in Top 10 Countries","metadata":{"panel-layout":{"height":43.224430084228516,"visible":true,"width":100}}},{"cell_type":"code","source":"# Median Annual salary for top 10 countries with highest respondents.\n\ndata_frame = df\ndata_frame_columns = ['Country', 'ConvertedCompYearly']\ncou_comp_yr_df = make_data_frame(data_frame_columns, data_frame)\nclean_cou_comp = clean_data(cou_comp_yr_df)\ngrouped_cou_comp = clean_cou_comp.groupby('Country', observed=False)['ConvertedCompYearly'].median().loc[top_10_countries.index]\ngrouped_cou_comp_df = grouped_cou_comp.to_frame(name='Median Annual Comp(USD)') #.sort_values(by='Median Annual Comp(USD)', ascending=False)\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Barh Median Annual salary for top 10 countries with highest respondents.\n\nx_values= grouped_cou_comp_df.index[::-1]\ny_values = grouped_cou_comp_df['Median Annual Comp(USD)'][::-1]\nch_title = 'Top 10 No. Respospondents Countries and Median Yr Salary'\n\ncreate_custom_barh(x_values, y_values, ch_title, lab_txt_pre='$', figsize=(8,5))","metadata":{"panel-layout":{"height":730,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Job Satisfaction Index Distribution","metadata":{"panel-layout":{"height":43.224430084228516,"visible":true,"width":100}}},{"cell_type":"code","source":"# Job Satisfaction distribution\n\nx_values = df['JobSat']\nfig = go.Figure(data=go.Histogram(x=x_values, marker_color=\"yellowgreen\", \n                                  hovertemplate=('<i>Job Satisfaction</i>: %{x}<br><i>Frequency</i>: %{y}<extra></extra>' )\n                                 ))\nfig.update_layout(\n    width=1100, height=600,\n    margin=dict(t=75, b=20, l=30, r=40),\n    bargap=0.0075,\n    title=dict(\n        text=\"Job Satisfaction Level Distribution Histogram\",\n        xanchor='left',\n        x=0.05,\n        yanchor='top',\n        y=0.95,\n        font=dict(size=15, color=\"black\", family=\"sans-serif\", weight=\"bold\"),\n    ),\n    \n)\n\nfig.update_layout(paper_bgcolor='floralwhite', plot_bgcolor=\"mintcream\",)\n\nfig.update_layout(\n    yaxis=dict(\n        showgrid=True,           # Ensure that the grid is visible\n        gridcolor='lightgray',    # Set the desired color for the horizontal grid lines\n        gridwidth=1,              # Set the width of the grid lines\n        griddash='dashdot'           # Make the grid lines dashed ('dash', 'dot', 'dashdot')\n    )\n)\n\nfig.update_yaxes(title=\"<b>Frequency</b>\", showticklabels=True)\n\nfig.update_xaxes(\n    title=\"\",\n    showticklabels=True,\n    tickmode='linear',  # Set tick mode to linear to display all ticks\n    tick0=0,            # Start ticks from 0\n    dtick=1             # Set tick interval to 1 to show all numbers\n)\n\nfig.show()\n","metadata":{"panel-layout":{"height":1340,"visible":true,"width":100}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}